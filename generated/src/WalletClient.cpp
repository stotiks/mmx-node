
// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/WalletClient.hxx>
#include <mmx/Contract.hxx>
#include <mmx/FarmerKeys.hxx>
#include <mmx/Solution.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/Wallet_accept_offer.hxx>
#include <mmx/Wallet_accept_offer_return.hxx>
#include <mmx/Wallet_add_account.hxx>
#include <mmx/Wallet_add_account_return.hxx>
#include <mmx/Wallet_add_token.hxx>
#include <mmx/Wallet_add_token_return.hxx>
#include <mmx/Wallet_cancel_offer.hxx>
#include <mmx/Wallet_cancel_offer_return.hxx>
#include <mmx/Wallet_complete.hxx>
#include <mmx/Wallet_complete_return.hxx>
#include <mmx/Wallet_create_account.hxx>
#include <mmx/Wallet_create_account_return.hxx>
#include <mmx/Wallet_create_wallet.hxx>
#include <mmx/Wallet_create_wallet_return.hxx>
#include <mmx/Wallet_deploy.hxx>
#include <mmx/Wallet_deploy_return.hxx>
#include <mmx/Wallet_deposit.hxx>
#include <mmx/Wallet_deposit_return.hxx>
#include <mmx/Wallet_execute.hxx>
#include <mmx/Wallet_execute_return.hxx>
#include <mmx/Wallet_gather_inputs_for.hxx>
#include <mmx/Wallet_gather_inputs_for_return.hxx>
#include <mmx/Wallet_get_account.hxx>
#include <mmx/Wallet_get_account_return.hxx>
#include <mmx/Wallet_get_address.hxx>
#include <mmx/Wallet_get_address_return.hxx>
#include <mmx/Wallet_get_address_info.hxx>
#include <mmx/Wallet_get_address_info_return.hxx>
#include <mmx/Wallet_get_all_accounts.hxx>
#include <mmx/Wallet_get_all_accounts_return.hxx>
#include <mmx/Wallet_get_all_address_infos.hxx>
#include <mmx/Wallet_get_all_address_infos_return.hxx>
#include <mmx/Wallet_get_all_addresses.hxx>
#include <mmx/Wallet_get_all_addresses_return.hxx>
#include <mmx/Wallet_get_all_farmer_keys.hxx>
#include <mmx/Wallet_get_all_farmer_keys_return.hxx>
#include <mmx/Wallet_get_balance.hxx>
#include <mmx/Wallet_get_balance_return.hxx>
#include <mmx/Wallet_get_balances.hxx>
#include <mmx/Wallet_get_balances_return.hxx>
#include <mmx/Wallet_get_contract_balances.hxx>
#include <mmx/Wallet_get_contract_balances_return.hxx>
#include <mmx/Wallet_get_contracts.hxx>
#include <mmx/Wallet_get_contracts_return.hxx>
#include <mmx/Wallet_get_farmer_keys.hxx>
#include <mmx/Wallet_get_farmer_keys_return.hxx>
#include <mmx/Wallet_get_history.hxx>
#include <mmx/Wallet_get_history_return.hxx>
#include <mmx/Wallet_get_master_seed.hxx>
#include <mmx/Wallet_get_master_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_seed.hxx>
#include <mmx/Wallet_get_mnemonic_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist_return.hxx>
#include <mmx/Wallet_get_token_list.hxx>
#include <mmx/Wallet_get_token_list_return.hxx>
#include <mmx/Wallet_get_total_balances_for.hxx>
#include <mmx/Wallet_get_total_balances_for_return.hxx>
#include <mmx/Wallet_get_tx_history.hxx>
#include <mmx/Wallet_get_tx_history_return.hxx>
#include <mmx/Wallet_is_locked.hxx>
#include <mmx/Wallet_is_locked_return.hxx>
#include <mmx/Wallet_lock.hxx>
#include <mmx/Wallet_lock_return.hxx>
#include <mmx/Wallet_make_offer.hxx>
#include <mmx/Wallet_make_offer_return.hxx>
#include <mmx/Wallet_mark_spent.hxx>
#include <mmx/Wallet_mark_spent_return.hxx>
#include <mmx/Wallet_mint.hxx>
#include <mmx/Wallet_mint_return.hxx>
#include <mmx/Wallet_mutate.hxx>
#include <mmx/Wallet_mutate_return.hxx>
#include <mmx/Wallet_release.hxx>
#include <mmx/Wallet_release_return.hxx>
#include <mmx/Wallet_release_all.hxx>
#include <mmx/Wallet_release_all_return.hxx>
#include <mmx/Wallet_rem_token.hxx>
#include <mmx/Wallet_rem_token_return.hxx>
#include <mmx/Wallet_reserve.hxx>
#include <mmx/Wallet_reserve_return.hxx>
#include <mmx/Wallet_reset_cache.hxx>
#include <mmx/Wallet_reset_cache_return.hxx>
#include <mmx/Wallet_send.hxx>
#include <mmx/Wallet_send_return.hxx>
#include <mmx/Wallet_send_from.hxx>
#include <mmx/Wallet_send_from_return.hxx>
#include <mmx/Wallet_send_many.hxx>
#include <mmx/Wallet_send_many_return.hxx>
#include <mmx/Wallet_send_off.hxx>
#include <mmx/Wallet_send_off_return.hxx>
#include <mmx/Wallet_sign_msg.hxx>
#include <mmx/Wallet_sign_msg_return.hxx>
#include <mmx/Wallet_sign_off.hxx>
#include <mmx/Wallet_sign_off_return.hxx>
#include <mmx/Wallet_unlock.hxx>
#include <mmx/Wallet_unlock_return.hxx>
#include <mmx/Wallet_update_cache.hxx>
#include <mmx/Wallet_update_cache_return.hxx>
#include <mmx/account_t.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/address_info_t.hxx>
#include <mmx/balance_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/spend_options_t.hxx>
#include <mmx/tx_entry_t.hxx>
#include <mmx/tx_log_entry_t.hxx>
#include <mmx/tx_type_e.hxx>
#include <mmx/txin_t.hxx>
#include <mmx/uint128.hpp>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/Object.hpp>
#include <vnx/Variant.hpp>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpData.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace mmx {

WalletClient::WalletClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

WalletClient::WalletClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::send(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& dst_addr, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_send::create();
	_method->index = index;
	_method->amount = amount;
	_method->dst_addr = dst_addr;
	_method->currency = currency;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_send_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::send_many(const uint32_t& index, const std::map<::mmx::addr_t, uint64_t>& amounts, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_send_many::create();
	_method->index = index;
	_method->amounts = amounts;
	_method->currency = currency;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_send_many_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::send_from(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& dst_addr, const ::mmx::addr_t& src_addr, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_send_from::create();
	_method->index = index;
	_method->amount = amount;
	_method->dst_addr = dst_addr;
	_method->src_addr = src_addr;
	_method->currency = currency;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_send_from_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::mint(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& dst_addr, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_mint::create();
	_method->index = index;
	_method->amount = amount;
	_method->dst_addr = dst_addr;
	_method->currency = currency;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_mint_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::deploy(const uint32_t& index, std::shared_ptr<const ::mmx::Contract> contract, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_deploy::create();
	_method->index = index;
	_method->contract = contract;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_deploy_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::mutate(const uint32_t& index, const ::mmx::addr_t& address, const ::vnx::Object& method, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_mutate::create();
	_method->index = index;
	_method->address = address;
	_method->method = method;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_mutate_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::execute(const uint32_t& index, const ::mmx::addr_t& address, const std::string& method, const std::vector<::vnx::Variant>& args, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_execute::create();
	_method->index = index;
	_method->address = address;
	_method->method = method;
	_method->args = args;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_execute_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::deposit(const uint32_t& index, const ::mmx::addr_t& address, const std::string& method, const std::vector<::vnx::Variant>& args, const uint64_t& amount, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_deposit::create();
	_method->index = index;
	_method->address = address;
	_method->method = method;
	_method->args = args;
	_method->amount = amount;
	_method->currency = currency;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_deposit_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::make_offer(const uint32_t& index, const uint32_t& owner, const uint64_t& bid_amount, const ::mmx::addr_t& bid_currency, const uint64_t& ask_amount, const ::mmx::addr_t& ask_currency, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_make_offer::create();
	_method->index = index;
	_method->owner = owner;
	_method->bid_amount = bid_amount;
	_method->bid_currency = bid_currency;
	_method->ask_amount = ask_amount;
	_method->ask_currency = ask_currency;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_make_offer_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::accept_offer(const uint32_t& index, const ::mmx::addr_t& address, const uint32_t& dst_addr, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_accept_offer::create();
	_method->index = index;
	_method->address = address;
	_method->dst_addr = dst_addr;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_accept_offer_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::cancel_offer(const uint32_t& index, const ::mmx::addr_t& address, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_cancel_offer::create();
	_method->index = index;
	_method->address = address;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_cancel_offer_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::complete(const uint32_t& index, std::shared_ptr<const ::mmx::Transaction> tx, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_complete::create();
	_method->index = index;
	_method->tx = tx;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_complete_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> WalletClient::sign_off(const uint32_t& index, std::shared_ptr<const ::mmx::Transaction> tx, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_sign_off::create();
	_method->index = index;
	_method->tx = tx;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_sign_off_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Solution> WalletClient::sign_msg(const uint32_t& index, const ::mmx::addr_t& address, const ::mmx::hash_t& msg) {
	auto _method = ::mmx::Wallet_sign_msg::create();
	_method->index = index;
	_method->address = address;
	_method->msg = msg;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_sign_msg_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Solution>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

void WalletClient::send_off(const uint32_t& index, std::shared_ptr<const ::mmx::Transaction> tx) {
	auto _method = ::mmx::Wallet_send_off::create();
	_method->index = index;
	_method->tx = tx;
	vnx_request(_method, false);
}

void WalletClient::send_off_async(const uint32_t& index, std::shared_ptr<const ::mmx::Transaction> tx) {
	auto _method = ::mmx::Wallet_send_off::create();
	_method->index = index;
	_method->tx = tx;
	vnx_request(_method, true);
}

void WalletClient::mark_spent(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts) {
	auto _method = ::mmx::Wallet_mark_spent::create();
	_method->index = index;
	_method->amounts = amounts;
	vnx_request(_method, false);
}

void WalletClient::mark_spent_async(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts) {
	auto _method = ::mmx::Wallet_mark_spent::create();
	_method->index = index;
	_method->amounts = amounts;
	vnx_request(_method, true);
}

void WalletClient::reserve(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts) {
	auto _method = ::mmx::Wallet_reserve::create();
	_method->index = index;
	_method->amounts = amounts;
	vnx_request(_method, false);
}

void WalletClient::reserve_async(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts) {
	auto _method = ::mmx::Wallet_reserve::create();
	_method->index = index;
	_method->amounts = amounts;
	vnx_request(_method, true);
}

void WalletClient::release(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts) {
	auto _method = ::mmx::Wallet_release::create();
	_method->index = index;
	_method->amounts = amounts;
	vnx_request(_method, false);
}

void WalletClient::release_async(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts) {
	auto _method = ::mmx::Wallet_release::create();
	_method->index = index;
	_method->amounts = amounts;
	vnx_request(_method, true);
}

void WalletClient::release_all() {
	auto _method = ::mmx::Wallet_release_all::create();
	vnx_request(_method, false);
}

void WalletClient::release_all_async() {
	auto _method = ::mmx::Wallet_release_all::create();
	vnx_request(_method, true);
}

void WalletClient::reset_cache(const uint32_t& index) {
	auto _method = ::mmx::Wallet_reset_cache::create();
	_method->index = index;
	vnx_request(_method, false);
}

void WalletClient::reset_cache_async(const uint32_t& index) {
	auto _method = ::mmx::Wallet_reset_cache::create();
	_method->index = index;
	vnx_request(_method, true);
}

void WalletClient::update_cache(const uint32_t& index) {
	auto _method = ::mmx::Wallet_update_cache::create();
	_method->index = index;
	vnx_request(_method, false);
}

void WalletClient::update_cache_async(const uint32_t& index) {
	auto _method = ::mmx::Wallet_update_cache::create();
	_method->index = index;
	vnx_request(_method, true);
}

std::vector<::mmx::tx_entry_t> WalletClient::get_history(const uint32_t& index, const int32_t& since, const vnx::optional<::mmx::tx_type_e>& type, const vnx::optional<::mmx::addr_t>& currency) {
	auto _method = ::mmx::Wallet_get_history::create();
	_method->index = index;
	_method->since = since;
	_method->type = type;
	_method->currency = currency;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_history_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::tx_entry_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::vector<::mmx::tx_log_entry_t> WalletClient::get_tx_history(const uint32_t& index, const int32_t& limit, const uint32_t& offset) {
	auto _method = ::mmx::Wallet_get_tx_history::create();
	_method->index = index;
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_tx_history_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::tx_log_entry_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::vector<::mmx::txin_t> WalletClient::gather_inputs_for(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options) {
	auto _method = ::mmx::Wallet_gather_inputs_for::create();
	_method->index = index;
	_method->amount = amount;
	_method->currency = currency;
	_method->options = options;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_gather_inputs_for_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::txin_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

::mmx::balance_t WalletClient::get_balance(const uint32_t& index, const ::mmx::addr_t& currency, const uint32_t& min_confirm) {
	auto _method = ::mmx::Wallet_get_balance::create();
	_method->index = index;
	_method->currency = currency;
	_method->min_confirm = min_confirm;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_balance_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::balance_t>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::map<::mmx::addr_t, ::mmx::balance_t> WalletClient::get_balances(const uint32_t& index, const uint32_t& min_confirm) {
	auto _method = ::mmx::Wallet_get_balances::create();
	_method->index = index;
	_method->min_confirm = min_confirm;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_balances_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::map<::mmx::addr_t, ::mmx::balance_t> WalletClient::get_total_balances_for(const std::vector<::mmx::addr_t>& addresses, const uint32_t& min_confirm) {
	auto _method = ::mmx::Wallet_get_total_balances_for::create();
	_method->addresses = addresses;
	_method->min_confirm = min_confirm;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_total_balances_for_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::map<::mmx::addr_t, ::mmx::balance_t> WalletClient::get_contract_balances(const ::mmx::addr_t& address, const uint32_t& min_confirm) {
	auto _method = ::mmx::Wallet_get_contract_balances::create();
	_method->address = address;
	_method->min_confirm = min_confirm;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_contract_balances_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::map<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>> WalletClient::get_contracts(const uint32_t& index) {
	auto _method = ::mmx::Wallet_get_contracts::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_contracts_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

::mmx::addr_t WalletClient::get_address(const uint32_t& index, const uint32_t& offset) {
	auto _method = ::mmx::Wallet_get_address::create();
	_method->index = index;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_address_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::addr_t>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::vector<::mmx::addr_t> WalletClient::get_all_addresses(const int32_t& index) {
	auto _method = ::mmx::Wallet_get_all_addresses::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_addresses_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::addr_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

::mmx::address_info_t WalletClient::get_address_info(const uint32_t& index, const uint32_t& offset) {
	auto _method = ::mmx::Wallet_get_address_info::create();
	_method->index = index;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_address_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::address_info_t>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::vector<::mmx::address_info_t> WalletClient::get_all_address_infos(const int32_t& index) {
	auto _method = ::mmx::Wallet_get_all_address_infos::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_address_infos_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::address_info_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

::mmx::account_t WalletClient::get_account(const uint32_t& index) {
	auto _method = ::mmx::Wallet_get_account::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_account_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::account_t>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::map<uint32_t, ::mmx::account_t> WalletClient::get_all_accounts() {
	auto _method = ::mmx::Wallet_get_all_accounts::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_accounts_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<uint32_t, ::mmx::account_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

vnx::bool_t WalletClient::is_locked(const uint32_t& index) {
	auto _method = ::mmx::Wallet_is_locked::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_is_locked_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::bool_t>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

void WalletClient::lock(const uint32_t& index) {
	auto _method = ::mmx::Wallet_lock::create();
	_method->index = index;
	vnx_request(_method, false);
}

void WalletClient::lock_async(const uint32_t& index) {
	auto _method = ::mmx::Wallet_lock::create();
	_method->index = index;
	vnx_request(_method, true);
}

void WalletClient::unlock(const uint32_t& index, const std::string& passphrase) {
	auto _method = ::mmx::Wallet_unlock::create();
	_method->index = index;
	_method->passphrase = passphrase;
	vnx_request(_method, false);
}

void WalletClient::unlock_async(const uint32_t& index, const std::string& passphrase) {
	auto _method = ::mmx::Wallet_unlock::create();
	_method->index = index;
	_method->passphrase = passphrase;
	vnx_request(_method, true);
}

void WalletClient::add_account(const uint32_t& index, const ::mmx::account_t& config, const vnx::optional<std::string>& passphrase) {
	auto _method = ::mmx::Wallet_add_account::create();
	_method->index = index;
	_method->config = config;
	_method->passphrase = passphrase;
	vnx_request(_method, false);
}

void WalletClient::add_account_async(const uint32_t& index, const ::mmx::account_t& config, const vnx::optional<std::string>& passphrase) {
	auto _method = ::mmx::Wallet_add_account::create();
	_method->index = index;
	_method->config = config;
	_method->passphrase = passphrase;
	vnx_request(_method, true);
}

void WalletClient::create_account(const ::mmx::account_t& config, const vnx::optional<std::string>& passphrase) {
	auto _method = ::mmx::Wallet_create_account::create();
	_method->config = config;
	_method->passphrase = passphrase;
	vnx_request(_method, false);
}

void WalletClient::create_account_async(const ::mmx::account_t& config, const vnx::optional<std::string>& passphrase) {
	auto _method = ::mmx::Wallet_create_account::create();
	_method->config = config;
	_method->passphrase = passphrase;
	vnx_request(_method, true);
}

void WalletClient::create_wallet(const ::mmx::account_t& config, const vnx::optional<std::string>& words, const vnx::optional<std::string>& passphrase) {
	auto _method = ::mmx::Wallet_create_wallet::create();
	_method->config = config;
	_method->words = words;
	_method->passphrase = passphrase;
	vnx_request(_method, false);
}

void WalletClient::create_wallet_async(const ::mmx::account_t& config, const vnx::optional<std::string>& words, const vnx::optional<std::string>& passphrase) {
	auto _method = ::mmx::Wallet_create_wallet::create();
	_method->config = config;
	_method->words = words;
	_method->passphrase = passphrase;
	vnx_request(_method, true);
}

std::vector<std::string> WalletClient::get_mnemonic_wordlist(const std::string& lang) {
	auto _method = ::mmx::Wallet_get_mnemonic_wordlist::create();
	_method->lang = lang;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_mnemonic_wordlist_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::string>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::set<::mmx::addr_t> WalletClient::get_token_list() {
	auto _method = ::mmx::Wallet_get_token_list::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_token_list_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::set<::mmx::addr_t>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

void WalletClient::add_token(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Wallet_add_token::create();
	_method->address = address;
	vnx_request(_method, false);
}

void WalletClient::add_token_async(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Wallet_add_token::create();
	_method->address = address;
	vnx_request(_method, true);
}

void WalletClient::rem_token(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Wallet_rem_token::create();
	_method->address = address;
	vnx_request(_method, false);
}

void WalletClient::rem_token_async(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Wallet_rem_token::create();
	_method->address = address;
	vnx_request(_method, true);
}

::mmx::hash_t WalletClient::get_master_seed(const uint32_t& index) {
	auto _method = ::mmx::Wallet_get_master_seed::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_master_seed_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::hash_t>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::vector<std::string> WalletClient::get_mnemonic_seed(const uint32_t& index) {
	auto _method = ::mmx::Wallet_get_mnemonic_seed::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_mnemonic_seed_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::string>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::FarmerKeys> WalletClient::get_farmer_keys(const uint32_t& index) {
	auto _method = ::mmx::Wallet_get_farmer_keys::create();
	_method->index = index;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_farmer_keys_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::FarmerKeys>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::vector<std::shared_ptr<const ::mmx::FarmerKeys>> WalletClient::get_all_farmer_keys() {
	auto _method = ::mmx::Wallet_get_all_farmer_keys::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_farmer_keys_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::FarmerKeys>>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::vnx::addons::HttpResponse> WalletClient::http_request(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path) {
	auto _method = ::vnx::addons::HttpComponent_http_request::create();
	_method->request = request;
	_method->sub_path = sub_path;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpResponse>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::vnx::addons::HttpData> WalletClient::http_request_chunk(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const int64_t& offset, const int64_t& max_bytes) {
	auto _method = ::vnx::addons::HttpComponent_http_request_chunk::create();
	_method->request = request;
	_method->sub_path = sub_path;
	_method->offset = offset;
	_method->max_bytes = max_bytes;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_chunk_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpData>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

::vnx::Object WalletClient::vnx_get_config_object() {
	auto _method = ::vnx::ModuleInterface_vnx_get_config_object::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Object>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

::vnx::Variant WalletClient::vnx_get_config(const std::string& name) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config::create();
	_method->name = name;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Variant>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

void WalletClient::vnx_set_config_object(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, false);
}

void WalletClient::vnx_set_config_object_async(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, true);
}

void WalletClient::vnx_set_config(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, false);
}

void WalletClient::vnx_set_config_async(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, true);
}

::vnx::TypeCode WalletClient::vnx_get_type_code() {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::TypeCode>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

std::shared_ptr<const ::vnx::ModuleInfo> WalletClient::vnx_get_module_info() {
	auto _method = ::vnx::ModuleInterface_vnx_get_module_info::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::ModuleInfo>>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}

void WalletClient::vnx_restart() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, false);
}

void WalletClient::vnx_restart_async() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, true);
}

void WalletClient::vnx_stop() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, false);
}

void WalletClient::vnx_stop_async() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, true);
}

vnx::bool_t WalletClient::vnx_self_test() {
	auto _method = ::vnx::ModuleInterface_vnx_self_test::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::bool_t>();
	} else {
		throw std::logic_error("WalletClient: invalid return value");
	}
}


} // namespace mmx
