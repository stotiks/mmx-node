
// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/RouterBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <mmx/Block.hxx>
#include <mmx/PeerInfo.hxx>
#include <mmx/ProofOfTime.hxx>
#include <mmx/ProofResponse.hxx>
#include <mmx/Router_discover.hxx>
#include <mmx/Router_discover_return.hxx>
#include <mmx/Router_fetch_block.hxx>
#include <mmx/Router_fetch_block_return.hxx>
#include <mmx/Router_fetch_block_at.hxx>
#include <mmx/Router_fetch_block_at_return.hxx>
#include <mmx/Router_get_blocks_at.hxx>
#include <mmx/Router_get_blocks_at_return.hxx>
#include <mmx/Router_get_connected_peers.hxx>
#include <mmx/Router_get_connected_peers_return.hxx>
#include <mmx/Router_get_farmer_credits.hxx>
#include <mmx/Router_get_farmer_credits_return.hxx>
#include <mmx/Router_get_id.hxx>
#include <mmx/Router_get_id_return.hxx>
#include <mmx/Router_get_info.hxx>
#include <mmx/Router_get_info_return.hxx>
#include <mmx/Router_get_known_peers.hxx>
#include <mmx/Router_get_known_peers_return.hxx>
#include <mmx/Router_get_peer_info.hxx>
#include <mmx/Router_get_peer_info_return.hxx>
#include <mmx/Router_get_peers.hxx>
#include <mmx/Router_get_peers_return.hxx>
#include <mmx/Router_sign_msg.hxx>
#include <mmx/Router_sign_msg_return.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/node_info_t.hxx>
#include <mmx/node_type_e.hxx>
#include <mmx/pubkey_t.hpp>
#include <mmx/signature_t.hpp>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpData.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>
#include <vnx/addons/MsgServer.h>

#include <vnx/vnx.h>


namespace mmx {


const vnx::Hash64 RouterBase::VNX_TYPE_HASH(0x952c4ef2956f31c4ull);
const vnx::Hash64 RouterBase::VNX_CODE_HASH(0xfacdfb2cafdbba14ull);

RouterBase::RouterBase(const std::string& _vnx_name)
	:	MsgServer::MsgServer(_vnx_name)
{
	vnx::read_config(vnx_name + ".input_vdfs", input_vdfs);
	vnx::read_config(vnx_name + ".input_verified_vdfs", input_verified_vdfs);
	vnx::read_config(vnx_name + ".input_verified_proof", input_verified_proof);
	vnx::read_config(vnx_name + ".input_verified_blocks", input_verified_blocks);
	vnx::read_config(vnx_name + ".input_verified_transactions", input_verified_transactions);
	vnx::read_config(vnx_name + ".input_transactions", input_transactions);
	vnx::read_config(vnx_name + ".output_vdfs", output_vdfs);
	vnx::read_config(vnx_name + ".output_proof", output_proof);
	vnx::read_config(vnx_name + ".output_blocks", output_blocks);
	vnx::read_config(vnx_name + ".output_transactions", output_transactions);
	vnx::read_config(vnx_name + ".max_queue_ms", max_queue_ms);
	vnx::read_config(vnx_name + ".send_interval_ms", send_interval_ms);
	vnx::read_config(vnx_name + ".query_interval_ms", query_interval_ms);
	vnx::read_config(vnx_name + ".update_interval_ms", update_interval_ms);
	vnx::read_config(vnx_name + ".connect_interval_ms", connect_interval_ms);
	vnx::read_config(vnx_name + ".fetch_timeout_ms", fetch_timeout_ms);
	vnx::read_config(vnx_name + ".relay_target_ms", relay_target_ms);
	vnx::read_config(vnx_name + ".sync_loss_delay", sync_loss_delay);
	vnx::read_config(vnx_name + ".discover_interval", discover_interval);
	vnx::read_config(vnx_name + ".disconnect_interval", disconnect_interval);
	vnx::read_config(vnx_name + ".peer_retry_interval", peer_retry_interval);
	vnx::read_config(vnx_name + ".num_peers_out", num_peers_out);
	vnx::read_config(vnx_name + ".min_sync_peers", min_sync_peers);
	vnx::read_config(vnx_name + ".max_peer_set", max_peer_set);
	vnx::read_config(vnx_name + ".max_sent_cache", max_sent_cache);
	vnx::read_config(vnx_name + ".max_hash_cache", max_hash_cache);
	vnx::read_config(vnx_name + ".vdf_credits", vdf_credits);
	vnx::read_config(vnx_name + ".block_credits", block_credits);
	vnx::read_config(vnx_name + ".proof_credits", proof_credits);
	vnx::read_config(vnx_name + ".vdf_relay_cost", vdf_relay_cost);
	vnx::read_config(vnx_name + ".proof_relay_cost", proof_relay_cost);
	vnx::read_config(vnx_name + ".block_relay_cost", block_relay_cost);
	vnx::read_config(vnx_name + ".max_node_credits", max_node_credits);
	vnx::read_config(vnx_name + ".max_farmer_credits", max_farmer_credits);
	vnx::read_config(vnx_name + ".node_version", node_version);
	vnx::read_config(vnx_name + ".mode", mode);
	vnx::read_config(vnx_name + ".do_relay", do_relay);
	vnx::read_config(vnx_name + ".max_tx_upload", max_tx_upload);
	vnx::read_config(vnx_name + ".max_pending_cost", max_pending_cost);
	vnx::read_config(vnx_name + ".seed_peers", seed_peers);
	vnx::read_config(vnx_name + ".fixed_peers", fixed_peers);
	vnx::read_config(vnx_name + ".block_peers", block_peers);
	vnx::read_config(vnx_name + ".storage_path", storage_path);
	vnx::read_config(vnx_name + ".node_server", node_server);
}

vnx::Hash64 RouterBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string RouterBase::get_type_name() const {
	return "mmx.Router";
}

const vnx::TypeCode* RouterBase::get_type_code() const {
	return mmx::vnx_native_type_code_RouterBase;
}

void RouterBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = mmx::vnx_native_type_code_RouterBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, port);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, host);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, max_connections);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, listen_queue_size);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, stats_interval_ms);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, connection_timeout_ms);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, send_buffer_size);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, receive_buffer_size);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, tcp_no_delay);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, tcp_keepalive);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, show_warnings);
	_visitor.type_field(_type_code->fields[11], 11); vnx::accept(_visitor, max_msg_size);
	_visitor.type_field(_type_code->fields[12], 12); vnx::accept(_visitor, input_vdfs);
	_visitor.type_field(_type_code->fields[13], 13); vnx::accept(_visitor, input_verified_vdfs);
	_visitor.type_field(_type_code->fields[14], 14); vnx::accept(_visitor, input_verified_proof);
	_visitor.type_field(_type_code->fields[15], 15); vnx::accept(_visitor, input_verified_blocks);
	_visitor.type_field(_type_code->fields[16], 16); vnx::accept(_visitor, input_verified_transactions);
	_visitor.type_field(_type_code->fields[17], 17); vnx::accept(_visitor, input_transactions);
	_visitor.type_field(_type_code->fields[18], 18); vnx::accept(_visitor, output_vdfs);
	_visitor.type_field(_type_code->fields[19], 19); vnx::accept(_visitor, output_proof);
	_visitor.type_field(_type_code->fields[20], 20); vnx::accept(_visitor, output_blocks);
	_visitor.type_field(_type_code->fields[21], 21); vnx::accept(_visitor, output_transactions);
	_visitor.type_field(_type_code->fields[22], 22); vnx::accept(_visitor, max_queue_ms);
	_visitor.type_field(_type_code->fields[23], 23); vnx::accept(_visitor, send_interval_ms);
	_visitor.type_field(_type_code->fields[24], 24); vnx::accept(_visitor, query_interval_ms);
	_visitor.type_field(_type_code->fields[25], 25); vnx::accept(_visitor, update_interval_ms);
	_visitor.type_field(_type_code->fields[26], 26); vnx::accept(_visitor, connect_interval_ms);
	_visitor.type_field(_type_code->fields[27], 27); vnx::accept(_visitor, fetch_timeout_ms);
	_visitor.type_field(_type_code->fields[28], 28); vnx::accept(_visitor, relay_target_ms);
	_visitor.type_field(_type_code->fields[29], 29); vnx::accept(_visitor, sync_loss_delay);
	_visitor.type_field(_type_code->fields[30], 30); vnx::accept(_visitor, discover_interval);
	_visitor.type_field(_type_code->fields[31], 31); vnx::accept(_visitor, disconnect_interval);
	_visitor.type_field(_type_code->fields[32], 32); vnx::accept(_visitor, peer_retry_interval);
	_visitor.type_field(_type_code->fields[33], 33); vnx::accept(_visitor, num_peers_out);
	_visitor.type_field(_type_code->fields[34], 34); vnx::accept(_visitor, min_sync_peers);
	_visitor.type_field(_type_code->fields[35], 35); vnx::accept(_visitor, max_peer_set);
	_visitor.type_field(_type_code->fields[36], 36); vnx::accept(_visitor, max_sent_cache);
	_visitor.type_field(_type_code->fields[37], 37); vnx::accept(_visitor, max_hash_cache);
	_visitor.type_field(_type_code->fields[38], 38); vnx::accept(_visitor, vdf_credits);
	_visitor.type_field(_type_code->fields[39], 39); vnx::accept(_visitor, block_credits);
	_visitor.type_field(_type_code->fields[40], 40); vnx::accept(_visitor, proof_credits);
	_visitor.type_field(_type_code->fields[41], 41); vnx::accept(_visitor, vdf_relay_cost);
	_visitor.type_field(_type_code->fields[42], 42); vnx::accept(_visitor, proof_relay_cost);
	_visitor.type_field(_type_code->fields[43], 43); vnx::accept(_visitor, block_relay_cost);
	_visitor.type_field(_type_code->fields[44], 44); vnx::accept(_visitor, max_node_credits);
	_visitor.type_field(_type_code->fields[45], 45); vnx::accept(_visitor, max_farmer_credits);
	_visitor.type_field(_type_code->fields[46], 46); vnx::accept(_visitor, node_version);
	_visitor.type_field(_type_code->fields[47], 47); vnx::accept(_visitor, mode);
	_visitor.type_field(_type_code->fields[48], 48); vnx::accept(_visitor, do_relay);
	_visitor.type_field(_type_code->fields[49], 49); vnx::accept(_visitor, max_tx_upload);
	_visitor.type_field(_type_code->fields[50], 50); vnx::accept(_visitor, max_pending_cost);
	_visitor.type_field(_type_code->fields[51], 51); vnx::accept(_visitor, seed_peers);
	_visitor.type_field(_type_code->fields[52], 52); vnx::accept(_visitor, fixed_peers);
	_visitor.type_field(_type_code->fields[53], 53); vnx::accept(_visitor, block_peers);
	_visitor.type_field(_type_code->fields[54], 54); vnx::accept(_visitor, storage_path);
	_visitor.type_field(_type_code->fields[55], 55); vnx::accept(_visitor, node_server);
	_visitor.type_end(*_type_code);
}

void RouterBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"port\": "; vnx::write(_out, port);
	_out << ", \"host\": "; vnx::write(_out, host);
	_out << ", \"max_connections\": "; vnx::write(_out, max_connections);
	_out << ", \"listen_queue_size\": "; vnx::write(_out, listen_queue_size);
	_out << ", \"stats_interval_ms\": "; vnx::write(_out, stats_interval_ms);
	_out << ", \"connection_timeout_ms\": "; vnx::write(_out, connection_timeout_ms);
	_out << ", \"send_buffer_size\": "; vnx::write(_out, send_buffer_size);
	_out << ", \"receive_buffer_size\": "; vnx::write(_out, receive_buffer_size);
	_out << ", \"tcp_no_delay\": "; vnx::write(_out, tcp_no_delay);
	_out << ", \"tcp_keepalive\": "; vnx::write(_out, tcp_keepalive);
	_out << ", \"show_warnings\": "; vnx::write(_out, show_warnings);
	_out << ", \"max_msg_size\": "; vnx::write(_out, max_msg_size);
	_out << ", \"input_vdfs\": "; vnx::write(_out, input_vdfs);
	_out << ", \"input_verified_vdfs\": "; vnx::write(_out, input_verified_vdfs);
	_out << ", \"input_verified_proof\": "; vnx::write(_out, input_verified_proof);
	_out << ", \"input_verified_blocks\": "; vnx::write(_out, input_verified_blocks);
	_out << ", \"input_verified_transactions\": "; vnx::write(_out, input_verified_transactions);
	_out << ", \"input_transactions\": "; vnx::write(_out, input_transactions);
	_out << ", \"output_vdfs\": "; vnx::write(_out, output_vdfs);
	_out << ", \"output_proof\": "; vnx::write(_out, output_proof);
	_out << ", \"output_blocks\": "; vnx::write(_out, output_blocks);
	_out << ", \"output_transactions\": "; vnx::write(_out, output_transactions);
	_out << ", \"max_queue_ms\": "; vnx::write(_out, max_queue_ms);
	_out << ", \"send_interval_ms\": "; vnx::write(_out, send_interval_ms);
	_out << ", \"query_interval_ms\": "; vnx::write(_out, query_interval_ms);
	_out << ", \"update_interval_ms\": "; vnx::write(_out, update_interval_ms);
	_out << ", \"connect_interval_ms\": "; vnx::write(_out, connect_interval_ms);
	_out << ", \"fetch_timeout_ms\": "; vnx::write(_out, fetch_timeout_ms);
	_out << ", \"relay_target_ms\": "; vnx::write(_out, relay_target_ms);
	_out << ", \"sync_loss_delay\": "; vnx::write(_out, sync_loss_delay);
	_out << ", \"discover_interval\": "; vnx::write(_out, discover_interval);
	_out << ", \"disconnect_interval\": "; vnx::write(_out, disconnect_interval);
	_out << ", \"peer_retry_interval\": "; vnx::write(_out, peer_retry_interval);
	_out << ", \"num_peers_out\": "; vnx::write(_out, num_peers_out);
	_out << ", \"min_sync_peers\": "; vnx::write(_out, min_sync_peers);
	_out << ", \"max_peer_set\": "; vnx::write(_out, max_peer_set);
	_out << ", \"max_sent_cache\": "; vnx::write(_out, max_sent_cache);
	_out << ", \"max_hash_cache\": "; vnx::write(_out, max_hash_cache);
	_out << ", \"vdf_credits\": "; vnx::write(_out, vdf_credits);
	_out << ", \"block_credits\": "; vnx::write(_out, block_credits);
	_out << ", \"proof_credits\": "; vnx::write(_out, proof_credits);
	_out << ", \"vdf_relay_cost\": "; vnx::write(_out, vdf_relay_cost);
	_out << ", \"proof_relay_cost\": "; vnx::write(_out, proof_relay_cost);
	_out << ", \"block_relay_cost\": "; vnx::write(_out, block_relay_cost);
	_out << ", \"max_node_credits\": "; vnx::write(_out, max_node_credits);
	_out << ", \"max_farmer_credits\": "; vnx::write(_out, max_farmer_credits);
	_out << ", \"node_version\": "; vnx::write(_out, node_version);
	_out << ", \"mode\": "; vnx::write(_out, mode);
	_out << ", \"do_relay\": "; vnx::write(_out, do_relay);
	_out << ", \"max_tx_upload\": "; vnx::write(_out, max_tx_upload);
	_out << ", \"max_pending_cost\": "; vnx::write(_out, max_pending_cost);
	_out << ", \"seed_peers\": "; vnx::write(_out, seed_peers);
	_out << ", \"fixed_peers\": "; vnx::write(_out, fixed_peers);
	_out << ", \"block_peers\": "; vnx::write(_out, block_peers);
	_out << ", \"storage_path\": "; vnx::write(_out, storage_path);
	_out << ", \"node_server\": "; vnx::write(_out, node_server);
	_out << "}";
}

void RouterBase::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object RouterBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "mmx.Router";
	_object["port"] = port;
	_object["host"] = host;
	_object["max_connections"] = max_connections;
	_object["listen_queue_size"] = listen_queue_size;
	_object["stats_interval_ms"] = stats_interval_ms;
	_object["connection_timeout_ms"] = connection_timeout_ms;
	_object["send_buffer_size"] = send_buffer_size;
	_object["receive_buffer_size"] = receive_buffer_size;
	_object["tcp_no_delay"] = tcp_no_delay;
	_object["tcp_keepalive"] = tcp_keepalive;
	_object["show_warnings"] = show_warnings;
	_object["max_msg_size"] = max_msg_size;
	_object["input_vdfs"] = input_vdfs;
	_object["input_verified_vdfs"] = input_verified_vdfs;
	_object["input_verified_proof"] = input_verified_proof;
	_object["input_verified_blocks"] = input_verified_blocks;
	_object["input_verified_transactions"] = input_verified_transactions;
	_object["input_transactions"] = input_transactions;
	_object["output_vdfs"] = output_vdfs;
	_object["output_proof"] = output_proof;
	_object["output_blocks"] = output_blocks;
	_object["output_transactions"] = output_transactions;
	_object["max_queue_ms"] = max_queue_ms;
	_object["send_interval_ms"] = send_interval_ms;
	_object["query_interval_ms"] = query_interval_ms;
	_object["update_interval_ms"] = update_interval_ms;
	_object["connect_interval_ms"] = connect_interval_ms;
	_object["fetch_timeout_ms"] = fetch_timeout_ms;
	_object["relay_target_ms"] = relay_target_ms;
	_object["sync_loss_delay"] = sync_loss_delay;
	_object["discover_interval"] = discover_interval;
	_object["disconnect_interval"] = disconnect_interval;
	_object["peer_retry_interval"] = peer_retry_interval;
	_object["num_peers_out"] = num_peers_out;
	_object["min_sync_peers"] = min_sync_peers;
	_object["max_peer_set"] = max_peer_set;
	_object["max_sent_cache"] = max_sent_cache;
	_object["max_hash_cache"] = max_hash_cache;
	_object["vdf_credits"] = vdf_credits;
	_object["block_credits"] = block_credits;
	_object["proof_credits"] = proof_credits;
	_object["vdf_relay_cost"] = vdf_relay_cost;
	_object["proof_relay_cost"] = proof_relay_cost;
	_object["block_relay_cost"] = block_relay_cost;
	_object["max_node_credits"] = max_node_credits;
	_object["max_farmer_credits"] = max_farmer_credits;
	_object["node_version"] = node_version;
	_object["mode"] = mode;
	_object["do_relay"] = do_relay;
	_object["max_tx_upload"] = max_tx_upload;
	_object["max_pending_cost"] = max_pending_cost;
	_object["seed_peers"] = seed_peers;
	_object["fixed_peers"] = fixed_peers;
	_object["block_peers"] = block_peers;
	_object["storage_path"] = storage_path;
	_object["node_server"] = node_server;
	return _object;
}

void RouterBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "block_credits") {
			_entry.second.to(block_credits);
		} else if(_entry.first == "block_peers") {
			_entry.second.to(block_peers);
		} else if(_entry.first == "block_relay_cost") {
			_entry.second.to(block_relay_cost);
		} else if(_entry.first == "connect_interval_ms") {
			_entry.second.to(connect_interval_ms);
		} else if(_entry.first == "connection_timeout_ms") {
			_entry.second.to(connection_timeout_ms);
		} else if(_entry.first == "disconnect_interval") {
			_entry.second.to(disconnect_interval);
		} else if(_entry.first == "discover_interval") {
			_entry.second.to(discover_interval);
		} else if(_entry.first == "do_relay") {
			_entry.second.to(do_relay);
		} else if(_entry.first == "fetch_timeout_ms") {
			_entry.second.to(fetch_timeout_ms);
		} else if(_entry.first == "fixed_peers") {
			_entry.second.to(fixed_peers);
		} else if(_entry.first == "host") {
			_entry.second.to(host);
		} else if(_entry.first == "input_transactions") {
			_entry.second.to(input_transactions);
		} else if(_entry.first == "input_vdfs") {
			_entry.second.to(input_vdfs);
		} else if(_entry.first == "input_verified_blocks") {
			_entry.second.to(input_verified_blocks);
		} else if(_entry.first == "input_verified_proof") {
			_entry.second.to(input_verified_proof);
		} else if(_entry.first == "input_verified_transactions") {
			_entry.second.to(input_verified_transactions);
		} else if(_entry.first == "input_verified_vdfs") {
			_entry.second.to(input_verified_vdfs);
		} else if(_entry.first == "listen_queue_size") {
			_entry.second.to(listen_queue_size);
		} else if(_entry.first == "max_connections") {
			_entry.second.to(max_connections);
		} else if(_entry.first == "max_farmer_credits") {
			_entry.second.to(max_farmer_credits);
		} else if(_entry.first == "max_hash_cache") {
			_entry.second.to(max_hash_cache);
		} else if(_entry.first == "max_msg_size") {
			_entry.second.to(max_msg_size);
		} else if(_entry.first == "max_node_credits") {
			_entry.second.to(max_node_credits);
		} else if(_entry.first == "max_peer_set") {
			_entry.second.to(max_peer_set);
		} else if(_entry.first == "max_pending_cost") {
			_entry.second.to(max_pending_cost);
		} else if(_entry.first == "max_queue_ms") {
			_entry.second.to(max_queue_ms);
		} else if(_entry.first == "max_sent_cache") {
			_entry.second.to(max_sent_cache);
		} else if(_entry.first == "max_tx_upload") {
			_entry.second.to(max_tx_upload);
		} else if(_entry.first == "min_sync_peers") {
			_entry.second.to(min_sync_peers);
		} else if(_entry.first == "mode") {
			_entry.second.to(mode);
		} else if(_entry.first == "node_server") {
			_entry.second.to(node_server);
		} else if(_entry.first == "node_version") {
			_entry.second.to(node_version);
		} else if(_entry.first == "num_peers_out") {
			_entry.second.to(num_peers_out);
		} else if(_entry.first == "output_blocks") {
			_entry.second.to(output_blocks);
		} else if(_entry.first == "output_proof") {
			_entry.second.to(output_proof);
		} else if(_entry.first == "output_transactions") {
			_entry.second.to(output_transactions);
		} else if(_entry.first == "output_vdfs") {
			_entry.second.to(output_vdfs);
		} else if(_entry.first == "peer_retry_interval") {
			_entry.second.to(peer_retry_interval);
		} else if(_entry.first == "port") {
			_entry.second.to(port);
		} else if(_entry.first == "proof_credits") {
			_entry.second.to(proof_credits);
		} else if(_entry.first == "proof_relay_cost") {
			_entry.second.to(proof_relay_cost);
		} else if(_entry.first == "query_interval_ms") {
			_entry.second.to(query_interval_ms);
		} else if(_entry.first == "receive_buffer_size") {
			_entry.second.to(receive_buffer_size);
		} else if(_entry.first == "relay_target_ms") {
			_entry.second.to(relay_target_ms);
		} else if(_entry.first == "seed_peers") {
			_entry.second.to(seed_peers);
		} else if(_entry.first == "send_buffer_size") {
			_entry.second.to(send_buffer_size);
		} else if(_entry.first == "send_interval_ms") {
			_entry.second.to(send_interval_ms);
		} else if(_entry.first == "show_warnings") {
			_entry.second.to(show_warnings);
		} else if(_entry.first == "stats_interval_ms") {
			_entry.second.to(stats_interval_ms);
		} else if(_entry.first == "storage_path") {
			_entry.second.to(storage_path);
		} else if(_entry.first == "sync_loss_delay") {
			_entry.second.to(sync_loss_delay);
		} else if(_entry.first == "tcp_keepalive") {
			_entry.second.to(tcp_keepalive);
		} else if(_entry.first == "tcp_no_delay") {
			_entry.second.to(tcp_no_delay);
		} else if(_entry.first == "update_interval_ms") {
			_entry.second.to(update_interval_ms);
		} else if(_entry.first == "vdf_credits") {
			_entry.second.to(vdf_credits);
		} else if(_entry.first == "vdf_relay_cost") {
			_entry.second.to(vdf_relay_cost);
		}
	}
}

vnx::Variant RouterBase::get_field(const std::string& _name) const {
	if(_name == "port") {
		return vnx::Variant(port);
	}
	if(_name == "host") {
		return vnx::Variant(host);
	}
	if(_name == "max_connections") {
		return vnx::Variant(max_connections);
	}
	if(_name == "listen_queue_size") {
		return vnx::Variant(listen_queue_size);
	}
	if(_name == "stats_interval_ms") {
		return vnx::Variant(stats_interval_ms);
	}
	if(_name == "connection_timeout_ms") {
		return vnx::Variant(connection_timeout_ms);
	}
	if(_name == "send_buffer_size") {
		return vnx::Variant(send_buffer_size);
	}
	if(_name == "receive_buffer_size") {
		return vnx::Variant(receive_buffer_size);
	}
	if(_name == "tcp_no_delay") {
		return vnx::Variant(tcp_no_delay);
	}
	if(_name == "tcp_keepalive") {
		return vnx::Variant(tcp_keepalive);
	}
	if(_name == "show_warnings") {
		return vnx::Variant(show_warnings);
	}
	if(_name == "max_msg_size") {
		return vnx::Variant(max_msg_size);
	}
	if(_name == "input_vdfs") {
		return vnx::Variant(input_vdfs);
	}
	if(_name == "input_verified_vdfs") {
		return vnx::Variant(input_verified_vdfs);
	}
	if(_name == "input_verified_proof") {
		return vnx::Variant(input_verified_proof);
	}
	if(_name == "input_verified_blocks") {
		return vnx::Variant(input_verified_blocks);
	}
	if(_name == "input_verified_transactions") {
		return vnx::Variant(input_verified_transactions);
	}
	if(_name == "input_transactions") {
		return vnx::Variant(input_transactions);
	}
	if(_name == "output_vdfs") {
		return vnx::Variant(output_vdfs);
	}
	if(_name == "output_proof") {
		return vnx::Variant(output_proof);
	}
	if(_name == "output_blocks") {
		return vnx::Variant(output_blocks);
	}
	if(_name == "output_transactions") {
		return vnx::Variant(output_transactions);
	}
	if(_name == "max_queue_ms") {
		return vnx::Variant(max_queue_ms);
	}
	if(_name == "send_interval_ms") {
		return vnx::Variant(send_interval_ms);
	}
	if(_name == "query_interval_ms") {
		return vnx::Variant(query_interval_ms);
	}
	if(_name == "update_interval_ms") {
		return vnx::Variant(update_interval_ms);
	}
	if(_name == "connect_interval_ms") {
		return vnx::Variant(connect_interval_ms);
	}
	if(_name == "fetch_timeout_ms") {
		return vnx::Variant(fetch_timeout_ms);
	}
	if(_name == "relay_target_ms") {
		return vnx::Variant(relay_target_ms);
	}
	if(_name == "sync_loss_delay") {
		return vnx::Variant(sync_loss_delay);
	}
	if(_name == "discover_interval") {
		return vnx::Variant(discover_interval);
	}
	if(_name == "disconnect_interval") {
		return vnx::Variant(disconnect_interval);
	}
	if(_name == "peer_retry_interval") {
		return vnx::Variant(peer_retry_interval);
	}
	if(_name == "num_peers_out") {
		return vnx::Variant(num_peers_out);
	}
	if(_name == "min_sync_peers") {
		return vnx::Variant(min_sync_peers);
	}
	if(_name == "max_peer_set") {
		return vnx::Variant(max_peer_set);
	}
	if(_name == "max_sent_cache") {
		return vnx::Variant(max_sent_cache);
	}
	if(_name == "max_hash_cache") {
		return vnx::Variant(max_hash_cache);
	}
	if(_name == "vdf_credits") {
		return vnx::Variant(vdf_credits);
	}
	if(_name == "block_credits") {
		return vnx::Variant(block_credits);
	}
	if(_name == "proof_credits") {
		return vnx::Variant(proof_credits);
	}
	if(_name == "vdf_relay_cost") {
		return vnx::Variant(vdf_relay_cost);
	}
	if(_name == "proof_relay_cost") {
		return vnx::Variant(proof_relay_cost);
	}
	if(_name == "block_relay_cost") {
		return vnx::Variant(block_relay_cost);
	}
	if(_name == "max_node_credits") {
		return vnx::Variant(max_node_credits);
	}
	if(_name == "max_farmer_credits") {
		return vnx::Variant(max_farmer_credits);
	}
	if(_name == "node_version") {
		return vnx::Variant(node_version);
	}
	if(_name == "mode") {
		return vnx::Variant(mode);
	}
	if(_name == "do_relay") {
		return vnx::Variant(do_relay);
	}
	if(_name == "max_tx_upload") {
		return vnx::Variant(max_tx_upload);
	}
	if(_name == "max_pending_cost") {
		return vnx::Variant(max_pending_cost);
	}
	if(_name == "seed_peers") {
		return vnx::Variant(seed_peers);
	}
	if(_name == "fixed_peers") {
		return vnx::Variant(fixed_peers);
	}
	if(_name == "block_peers") {
		return vnx::Variant(block_peers);
	}
	if(_name == "storage_path") {
		return vnx::Variant(storage_path);
	}
	if(_name == "node_server") {
		return vnx::Variant(node_server);
	}
	return vnx::Variant();
}

void RouterBase::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "port") {
		_value.to(port);
	} else if(_name == "host") {
		_value.to(host);
	} else if(_name == "max_connections") {
		_value.to(max_connections);
	} else if(_name == "listen_queue_size") {
		_value.to(listen_queue_size);
	} else if(_name == "stats_interval_ms") {
		_value.to(stats_interval_ms);
	} else if(_name == "connection_timeout_ms") {
		_value.to(connection_timeout_ms);
	} else if(_name == "send_buffer_size") {
		_value.to(send_buffer_size);
	} else if(_name == "receive_buffer_size") {
		_value.to(receive_buffer_size);
	} else if(_name == "tcp_no_delay") {
		_value.to(tcp_no_delay);
	} else if(_name == "tcp_keepalive") {
		_value.to(tcp_keepalive);
	} else if(_name == "show_warnings") {
		_value.to(show_warnings);
	} else if(_name == "max_msg_size") {
		_value.to(max_msg_size);
	} else if(_name == "input_vdfs") {
		_value.to(input_vdfs);
	} else if(_name == "input_verified_vdfs") {
		_value.to(input_verified_vdfs);
	} else if(_name == "input_verified_proof") {
		_value.to(input_verified_proof);
	} else if(_name == "input_verified_blocks") {
		_value.to(input_verified_blocks);
	} else if(_name == "input_verified_transactions") {
		_value.to(input_verified_transactions);
	} else if(_name == "input_transactions") {
		_value.to(input_transactions);
	} else if(_name == "output_vdfs") {
		_value.to(output_vdfs);
	} else if(_name == "output_proof") {
		_value.to(output_proof);
	} else if(_name == "output_blocks") {
		_value.to(output_blocks);
	} else if(_name == "output_transactions") {
		_value.to(output_transactions);
	} else if(_name == "max_queue_ms") {
		_value.to(max_queue_ms);
	} else if(_name == "send_interval_ms") {
		_value.to(send_interval_ms);
	} else if(_name == "query_interval_ms") {
		_value.to(query_interval_ms);
	} else if(_name == "update_interval_ms") {
		_value.to(update_interval_ms);
	} else if(_name == "connect_interval_ms") {
		_value.to(connect_interval_ms);
	} else if(_name == "fetch_timeout_ms") {
		_value.to(fetch_timeout_ms);
	} else if(_name == "relay_target_ms") {
		_value.to(relay_target_ms);
	} else if(_name == "sync_loss_delay") {
		_value.to(sync_loss_delay);
	} else if(_name == "discover_interval") {
		_value.to(discover_interval);
	} else if(_name == "disconnect_interval") {
		_value.to(disconnect_interval);
	} else if(_name == "peer_retry_interval") {
		_value.to(peer_retry_interval);
	} else if(_name == "num_peers_out") {
		_value.to(num_peers_out);
	} else if(_name == "min_sync_peers") {
		_value.to(min_sync_peers);
	} else if(_name == "max_peer_set") {
		_value.to(max_peer_set);
	} else if(_name == "max_sent_cache") {
		_value.to(max_sent_cache);
	} else if(_name == "max_hash_cache") {
		_value.to(max_hash_cache);
	} else if(_name == "vdf_credits") {
		_value.to(vdf_credits);
	} else if(_name == "block_credits") {
		_value.to(block_credits);
	} else if(_name == "proof_credits") {
		_value.to(proof_credits);
	} else if(_name == "vdf_relay_cost") {
		_value.to(vdf_relay_cost);
	} else if(_name == "proof_relay_cost") {
		_value.to(proof_relay_cost);
	} else if(_name == "block_relay_cost") {
		_value.to(block_relay_cost);
	} else if(_name == "max_node_credits") {
		_value.to(max_node_credits);
	} else if(_name == "max_farmer_credits") {
		_value.to(max_farmer_credits);
	} else if(_name == "node_version") {
		_value.to(node_version);
	} else if(_name == "mode") {
		_value.to(mode);
	} else if(_name == "do_relay") {
		_value.to(do_relay);
	} else if(_name == "max_tx_upload") {
		_value.to(max_tx_upload);
	} else if(_name == "max_pending_cost") {
		_value.to(max_pending_cost);
	} else if(_name == "seed_peers") {
		_value.to(seed_peers);
	} else if(_name == "fixed_peers") {
		_value.to(fixed_peers);
	} else if(_name == "block_peers") {
		_value.to(block_peers);
	} else if(_name == "storage_path") {
		_value.to(storage_path);
	} else if(_name == "node_server") {
		_value.to(node_server);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const RouterBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, RouterBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* RouterBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> RouterBase::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "mmx.Router";
	type_code->type_hash = vnx::Hash64(0x952c4ef2956f31c4ull);
	type_code->code_hash = vnx::Hash64(0xfacdfb2cafdbba14ull);
	type_code->is_native = true;
	type_code->native_size = sizeof(::mmx::RouterBase);
	type_code->parents.resize(2);
	type_code->parents[0] = ::vnx::addons::MsgServerBase::static_get_type_code();
	type_code->parents[1] = ::vnx::addons::TcpServerBase::static_get_type_code();
	type_code->depends.resize(1);
	type_code->depends[0] = ::mmx::node_type_e::static_get_type_code();
	type_code->methods.resize(23);
	type_code->methods[0] = ::mmx::Router_discover::static_get_type_code();
	type_code->methods[1] = ::mmx::Router_fetch_block::static_get_type_code();
	type_code->methods[2] = ::mmx::Router_fetch_block_at::static_get_type_code();
	type_code->methods[3] = ::mmx::Router_get_blocks_at::static_get_type_code();
	type_code->methods[4] = ::mmx::Router_get_connected_peers::static_get_type_code();
	type_code->methods[5] = ::mmx::Router_get_farmer_credits::static_get_type_code();
	type_code->methods[6] = ::mmx::Router_get_id::static_get_type_code();
	type_code->methods[7] = ::mmx::Router_get_info::static_get_type_code();
	type_code->methods[8] = ::mmx::Router_get_known_peers::static_get_type_code();
	type_code->methods[9] = ::mmx::Router_get_peer_info::static_get_type_code();
	type_code->methods[10] = ::mmx::Router_get_peers::static_get_type_code();
	type_code->methods[11] = ::mmx::Router_sign_msg::static_get_type_code();
	type_code->methods[12] = ::vnx::ModuleInterface_vnx_get_config::static_get_type_code();
	type_code->methods[13] = ::vnx::ModuleInterface_vnx_get_config_object::static_get_type_code();
	type_code->methods[14] = ::vnx::ModuleInterface_vnx_get_module_info::static_get_type_code();
	type_code->methods[15] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[16] = ::vnx::ModuleInterface_vnx_restart::static_get_type_code();
	type_code->methods[17] = ::vnx::ModuleInterface_vnx_self_test::static_get_type_code();
	type_code->methods[18] = ::vnx::ModuleInterface_vnx_set_config::static_get_type_code();
	type_code->methods[19] = ::vnx::ModuleInterface_vnx_set_config_object::static_get_type_code();
	type_code->methods[20] = ::vnx::ModuleInterface_vnx_stop::static_get_type_code();
	type_code->methods[21] = ::vnx::addons::HttpComponent_http_request::static_get_type_code();
	type_code->methods[22] = ::vnx::addons::HttpComponent_http_request_chunk::static_get_type_code();
	type_code->fields.resize(56);
	{
		auto& field = type_code->fields[0];
		field.data_size = 4;
		field.name = "port";
		field.value = vnx::to_string(9090);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "host";
		field.value = vnx::to_string("localhost");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[2];
		field.data_size = 4;
		field.name = "max_connections";
		field.value = vnx::to_string(-1);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[3];
		field.data_size = 4;
		field.name = "listen_queue_size";
		field.value = vnx::to_string(100);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[4];
		field.data_size = 4;
		field.name = "stats_interval_ms";
		field.value = vnx::to_string(10000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[5];
		field.data_size = 4;
		field.name = "connection_timeout_ms";
		field.value = vnx::to_string(-1);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[6];
		field.data_size = 4;
		field.name = "send_buffer_size";
		field.code = {7};
	}
	{
		auto& field = type_code->fields[7];
		field.data_size = 4;
		field.name = "receive_buffer_size";
		field.code = {7};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 1;
		field.name = "tcp_no_delay";
		field.value = vnx::to_string(false);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[9];
		field.data_size = 1;
		field.name = "tcp_keepalive";
		field.value = vnx::to_string(true);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[10];
		field.data_size = 1;
		field.name = "show_warnings";
		field.value = vnx::to_string(false);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[11];
		field.data_size = 4;
		field.name = "max_msg_size";
		field.value = vnx::to_string(67108864);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[12];
		field.is_extended = true;
		field.name = "input_vdfs";
		field.value = vnx::to_string("timelord.proofs");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[13];
		field.is_extended = true;
		field.name = "input_verified_vdfs";
		field.value = vnx::to_string("node.verified_vdfs");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[14];
		field.is_extended = true;
		field.name = "input_verified_proof";
		field.value = vnx::to_string("node.verified_proof");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[15];
		field.is_extended = true;
		field.name = "input_verified_blocks";
		field.value = vnx::to_string("node.verified_blocks");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[16];
		field.is_extended = true;
		field.name = "input_verified_transactions";
		field.value = vnx::to_string("node.verified_transactions");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[17];
		field.is_extended = true;
		field.name = "input_transactions";
		field.value = vnx::to_string("node.transactions");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[18];
		field.is_extended = true;
		field.name = "output_vdfs";
		field.value = vnx::to_string("network.vdfs");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[19];
		field.is_extended = true;
		field.name = "output_proof";
		field.value = vnx::to_string("network.proof");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[20];
		field.is_extended = true;
		field.name = "output_blocks";
		field.value = vnx::to_string("network.blocks");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[21];
		field.is_extended = true;
		field.name = "output_transactions";
		field.value = vnx::to_string("network.transactions");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[22];
		field.data_size = 4;
		field.name = "max_queue_ms";
		field.value = vnx::to_string(1000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[23];
		field.data_size = 4;
		field.name = "send_interval_ms";
		field.value = vnx::to_string(20);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[24];
		field.data_size = 4;
		field.name = "query_interval_ms";
		field.value = vnx::to_string(10000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[25];
		field.data_size = 4;
		field.name = "update_interval_ms";
		field.value = vnx::to_string(1000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[26];
		field.data_size = 4;
		field.name = "connect_interval_ms";
		field.value = vnx::to_string(10000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[27];
		field.data_size = 4;
		field.name = "fetch_timeout_ms";
		field.value = vnx::to_string(10000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[28];
		field.data_size = 4;
		field.name = "relay_target_ms";
		field.value = vnx::to_string(5000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[29];
		field.data_size = 4;
		field.name = "sync_loss_delay";
		field.value = vnx::to_string(60);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[30];
		field.data_size = 4;
		field.name = "discover_interval";
		field.value = vnx::to_string(60);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[31];
		field.data_size = 4;
		field.name = "disconnect_interval";
		field.value = vnx::to_string(0);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[32];
		field.data_size = 4;
		field.name = "peer_retry_interval";
		field.value = vnx::to_string(360);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[33];
		field.data_size = 4;
		field.name = "num_peers_out";
		field.value = vnx::to_string(8);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[34];
		field.data_size = 4;
		field.name = "min_sync_peers";
		field.value = vnx::to_string(2);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[35];
		field.data_size = 4;
		field.name = "max_peer_set";
		field.value = vnx::to_string(100);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[36];
		field.data_size = 4;
		field.name = "max_sent_cache";
		field.value = vnx::to_string(20000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[37];
		field.data_size = 4;
		field.name = "max_hash_cache";
		field.value = vnx::to_string(100000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[38];
		field.data_size = 4;
		field.name = "vdf_credits";
		field.value = vnx::to_string(1024);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[39];
		field.data_size = 4;
		field.name = "block_credits";
		field.value = vnx::to_string(256);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[40];
		field.data_size = 4;
		field.name = "proof_credits";
		field.value = vnx::to_string(10);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[41];
		field.data_size = 4;
		field.name = "vdf_relay_cost";
		field.value = vnx::to_string(768);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[42];
		field.data_size = 4;
		field.name = "proof_relay_cost";
		field.value = vnx::to_string(2);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[43];
		field.data_size = 4;
		field.name = "block_relay_cost";
		field.value = vnx::to_string(8);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[44];
		field.data_size = 4;
		field.name = "max_node_credits";
		field.value = vnx::to_string(1024);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[45];
		field.data_size = 4;
		field.name = "max_farmer_credits";
		field.value = vnx::to_string(32);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[46];
		field.data_size = 4;
		field.name = "node_version";
		field.value = vnx::to_string(102);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[47];
		field.is_extended = true;
		field.name = "mode";
		field.value = vnx::to_string("FULL_NODE");
		field.code = {19, 0};
	}
	{
		auto& field = type_code->fields[48];
		field.data_size = 1;
		field.name = "do_relay";
		field.value = vnx::to_string(true);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[49];
		field.data_size = 8;
		field.name = "max_tx_upload";
		field.value = vnx::to_string(2);
		field.code = {10};
	}
	{
		auto& field = type_code->fields[50];
		field.data_size = 8;
		field.name = "max_pending_cost";
		field.value = vnx::to_string(0.2);
		field.code = {10};
	}
	{
		auto& field = type_code->fields[51];
		field.is_extended = true;
		field.name = "seed_peers";
		field.code = {12, 32};
	}
	{
		auto& field = type_code->fields[52];
		field.is_extended = true;
		field.name = "fixed_peers";
		field.code = {12, 32};
	}
	{
		auto& field = type_code->fields[53];
		field.is_extended = true;
		field.name = "block_peers";
		field.code = {12, 32};
	}
	{
		auto& field = type_code->fields[54];
		field.is_extended = true;
		field.name = "storage_path";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[55];
		field.is_extended = true;
		field.name = "node_server";
		field.value = vnx::to_string("Node");
		field.code = {32};
	}
	type_code->build();
	return type_code;
}

void RouterBase::vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) {
	const auto* _type_code = _value->get_type_code();
	while(_type_code) {
		switch(_type_code->type_hash) {
			case 0x94965d816d328467ull:
				handle(std::static_pointer_cast<const ::mmx::Block>(_value));
				return;
			case 0xa84a63942b8e5c6aull:
				handle(std::static_pointer_cast<const ::mmx::ProofOfTime>(_value));
				return;
			case 0x816e898b36befae0ull:
				handle(std::static_pointer_cast<const ::mmx::ProofResponse>(_value));
				return;
			case 0xce0462acdceaa5bcull:
				handle(std::static_pointer_cast<const ::mmx::Transaction>(_value));
				return;
			default:
				_type_code = _type_code->super;
		}
	}
	handle(std::static_pointer_cast<const vnx::Value>(_value));
}

std::shared_ptr<vnx::Value> RouterBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	switch(_method->get_type_hash()) {
		case 0xeda51767d96e246cull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_discover>(_method);
			auto _return_value = ::mmx::Router_discover_return::create();
			discover();
			return _return_value;
		}
		case 0x7c2f762681e7cc51ull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_fetch_block>(_method);
			fetch_block_async(_args->hash, _args->address, _request_id);
			return nullptr;
		}
		case 0xa4deba522ed6f8adull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_fetch_block_at>(_method);
			fetch_block_at_async(_args->height, _args->address, _request_id);
			return nullptr;
		}
		case 0x1eb0c0d7eae3c33aull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_blocks_at>(_method);
			get_blocks_at_async(_args->height, _request_id);
			return nullptr;
		}
		case 0x8682feb65fbb77feull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_connected_peers>(_method);
			auto _return_value = ::mmx::Router_get_connected_peers_return::create();
			_return_value->_ret_0 = get_connected_peers();
			return _return_value;
		}
		case 0xb9a99acad3a2c7cbull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_farmer_credits>(_method);
			auto _return_value = ::mmx::Router_get_farmer_credits_return::create();
			_return_value->_ret_0 = get_farmer_credits();
			return _return_value;
		}
		case 0xb9f7168b5ae94cd9ull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_id>(_method);
			auto _return_value = ::mmx::Router_get_id_return::create();
			_return_value->_ret_0 = get_id();
			return _return_value;
		}
		case 0x364ea887c149a265ull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_info>(_method);
			auto _return_value = ::mmx::Router_get_info_return::create();
			_return_value->_ret_0 = get_info();
			return _return_value;
		}
		case 0xaa408b6bf4e8168dull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_known_peers>(_method);
			auto _return_value = ::mmx::Router_get_known_peers_return::create();
			_return_value->_ret_0 = get_known_peers();
			return _return_value;
		}
		case 0x520a467ef9324cb3ull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_peer_info>(_method);
			auto _return_value = ::mmx::Router_get_peer_info_return::create();
			_return_value->_ret_0 = get_peer_info();
			return _return_value;
		}
		case 0x66d68bd91b462049ull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_get_peers>(_method);
			auto _return_value = ::mmx::Router_get_peers_return::create();
			_return_value->_ret_0 = get_peers(_args->max_count);
			return _return_value;
		}
		case 0x88ede2fbb99ab63eull: {
			auto _args = std::static_pointer_cast<const ::mmx::Router_sign_msg>(_method);
			auto _return_value = ::mmx::Router_sign_msg_return::create();
			_return_value->_ret_0 = sign_msg(_args->msg);
			return _return_value;
		}
		case 0xbbc7f1a01044d294ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_return::create();
			_return_value->_ret_0 = vnx_get_config(_args->name);
			return _return_value;
		}
		case 0x17f58f68bf83abc0ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_object_return::create();
			_return_value->_ret_0 = vnx_get_config_object();
			return _return_value;
		}
		case 0xf6d82bdf66d034a1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_module_info_return::create();
			_return_value->_ret_0 = vnx_get_module_info();
			return _return_value;
		}
		case 0x305ec4d628960e5dull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
			_return_value->_ret_0 = vnx_get_type_code();
			return _return_value;
		}
		case 0x9e95dc280cecca1bull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_restart>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_restart_return::create();
			vnx_restart();
			return _return_value;
		}
		case 0x6ce3775b41a42697ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_self_test_return::create();
			_return_value->_ret_0 = vnx_self_test();
			return _return_value;
		}
		case 0x362aac91373958b7ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_return::create();
			vnx_set_config(_args->name, _args->value);
			return _return_value;
		}
		case 0xca30f814f17f322full: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_object_return::create();
			vnx_set_config_object(_args->config);
			return _return_value;
		}
		case 0x7ab49ce3d1bfc0d2ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_stop>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_stop_return::create();
			vnx_stop();
			return _return_value;
		}
		case 0xe0b6c38f619bad92ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::HttpComponent_http_request>(_method);
			http_request_async(_args->request, _args->sub_path, _request_id);
			return nullptr;
		}
		case 0x97e79d08440406d5ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::HttpComponent_http_request_chunk>(_method);
			http_request_chunk_async(_args->request, _args->sub_path, _args->offset, _args->max_bytes, _request_id);
			return nullptr;
		}
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : vnx::Hash64();
	_ex->method = _method->get_type_name();
	return _ex;
}

void RouterBase::get_blocks_at_async_return(const vnx::request_id_t& _request_id, const std::vector<std::shared_ptr<const ::mmx::Block>>& _ret_0) const {
	auto _return_value = ::mmx::Router_get_blocks_at_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}

void RouterBase::fetch_block_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::mmx::Block>& _ret_0) const {
	auto _return_value = ::mmx::Router_fetch_block_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}

void RouterBase::fetch_block_at_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::mmx::Block>& _ret_0) const {
	auto _return_value = ::mmx::Router_fetch_block_at_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}

void RouterBase::http_request_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpResponse>& _ret_0) const {
	auto _return_value = ::vnx::addons::HttpComponent_http_request_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}

void RouterBase::http_request_chunk_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpData>& _ret_0) const {
	auto _return_value = ::vnx::addons::HttpComponent_http_request_chunk_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}


} // namespace mmx


namespace vnx {

void read(TypeInput& in, ::mmx::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.port, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[2]) {
			vnx::read_value(_buf + _field->offset, value.max_connections, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[3]) {
			vnx::read_value(_buf + _field->offset, value.listen_queue_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[4]) {
			vnx::read_value(_buf + _field->offset, value.stats_interval_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[5]) {
			vnx::read_value(_buf + _field->offset, value.connection_timeout_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[6]) {
			vnx::read_value(_buf + _field->offset, value.send_buffer_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[7]) {
			vnx::read_value(_buf + _field->offset, value.receive_buffer_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.tcp_no_delay, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[9]) {
			vnx::read_value(_buf + _field->offset, value.tcp_keepalive, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[10]) {
			vnx::read_value(_buf + _field->offset, value.show_warnings, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[11]) {
			vnx::read_value(_buf + _field->offset, value.max_msg_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[22]) {
			vnx::read_value(_buf + _field->offset, value.max_queue_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[23]) {
			vnx::read_value(_buf + _field->offset, value.send_interval_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[24]) {
			vnx::read_value(_buf + _field->offset, value.query_interval_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[25]) {
			vnx::read_value(_buf + _field->offset, value.update_interval_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[26]) {
			vnx::read_value(_buf + _field->offset, value.connect_interval_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[27]) {
			vnx::read_value(_buf + _field->offset, value.fetch_timeout_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[28]) {
			vnx::read_value(_buf + _field->offset, value.relay_target_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[29]) {
			vnx::read_value(_buf + _field->offset, value.sync_loss_delay, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[30]) {
			vnx::read_value(_buf + _field->offset, value.discover_interval, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[31]) {
			vnx::read_value(_buf + _field->offset, value.disconnect_interval, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[32]) {
			vnx::read_value(_buf + _field->offset, value.peer_retry_interval, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[33]) {
			vnx::read_value(_buf + _field->offset, value.num_peers_out, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[34]) {
			vnx::read_value(_buf + _field->offset, value.min_sync_peers, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[35]) {
			vnx::read_value(_buf + _field->offset, value.max_peer_set, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[36]) {
			vnx::read_value(_buf + _field->offset, value.max_sent_cache, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[37]) {
			vnx::read_value(_buf + _field->offset, value.max_hash_cache, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[38]) {
			vnx::read_value(_buf + _field->offset, value.vdf_credits, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[39]) {
			vnx::read_value(_buf + _field->offset, value.block_credits, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[40]) {
			vnx::read_value(_buf + _field->offset, value.proof_credits, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[41]) {
			vnx::read_value(_buf + _field->offset, value.vdf_relay_cost, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[42]) {
			vnx::read_value(_buf + _field->offset, value.proof_relay_cost, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[43]) {
			vnx::read_value(_buf + _field->offset, value.block_relay_cost, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[44]) {
			vnx::read_value(_buf + _field->offset, value.max_node_credits, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[45]) {
			vnx::read_value(_buf + _field->offset, value.max_farmer_credits, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[46]) {
			vnx::read_value(_buf + _field->offset, value.node_version, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[48]) {
			vnx::read_value(_buf + _field->offset, value.do_relay, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[49]) {
			vnx::read_value(_buf + _field->offset, value.max_tx_upload, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[50]) {
			vnx::read_value(_buf + _field->offset, value.max_pending_cost, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 1: vnx::read(in, value.host, type_code, _field->code.data()); break;
			case 12: vnx::read(in, value.input_vdfs, type_code, _field->code.data()); break;
			case 13: vnx::read(in, value.input_verified_vdfs, type_code, _field->code.data()); break;
			case 14: vnx::read(in, value.input_verified_proof, type_code, _field->code.data()); break;
			case 15: vnx::read(in, value.input_verified_blocks, type_code, _field->code.data()); break;
			case 16: vnx::read(in, value.input_verified_transactions, type_code, _field->code.data()); break;
			case 17: vnx::read(in, value.input_transactions, type_code, _field->code.data()); break;
			case 18: vnx::read(in, value.output_vdfs, type_code, _field->code.data()); break;
			case 19: vnx::read(in, value.output_proof, type_code, _field->code.data()); break;
			case 20: vnx::read(in, value.output_blocks, type_code, _field->code.data()); break;
			case 21: vnx::read(in, value.output_transactions, type_code, _field->code.data()); break;
			case 47: vnx::read(in, value.mode, type_code, _field->code.data()); break;
			case 51: vnx::read(in, value.seed_peers, type_code, _field->code.data()); break;
			case 52: vnx::read(in, value.fixed_peers, type_code, _field->code.data()); break;
			case 53: vnx::read(in, value.block_peers, type_code, _field->code.data()); break;
			case 54: vnx::read(in, value.storage_path, type_code, _field->code.data()); break;
			case 55: vnx::read(in, value.node_server, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::mmx::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = mmx::vnx_native_type_code_RouterBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::mmx::RouterBase>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(152);
	vnx::write_value(_buf + 0, value.port);
	vnx::write_value(_buf + 4, value.max_connections);
	vnx::write_value(_buf + 8, value.listen_queue_size);
	vnx::write_value(_buf + 12, value.stats_interval_ms);
	vnx::write_value(_buf + 16, value.connection_timeout_ms);
	vnx::write_value(_buf + 20, value.send_buffer_size);
	vnx::write_value(_buf + 24, value.receive_buffer_size);
	vnx::write_value(_buf + 28, value.tcp_no_delay);
	vnx::write_value(_buf + 29, value.tcp_keepalive);
	vnx::write_value(_buf + 30, value.show_warnings);
	vnx::write_value(_buf + 31, value.max_msg_size);
	vnx::write_value(_buf + 35, value.max_queue_ms);
	vnx::write_value(_buf + 39, value.send_interval_ms);
	vnx::write_value(_buf + 43, value.query_interval_ms);
	vnx::write_value(_buf + 47, value.update_interval_ms);
	vnx::write_value(_buf + 51, value.connect_interval_ms);
	vnx::write_value(_buf + 55, value.fetch_timeout_ms);
	vnx::write_value(_buf + 59, value.relay_target_ms);
	vnx::write_value(_buf + 63, value.sync_loss_delay);
	vnx::write_value(_buf + 67, value.discover_interval);
	vnx::write_value(_buf + 71, value.disconnect_interval);
	vnx::write_value(_buf + 75, value.peer_retry_interval);
	vnx::write_value(_buf + 79, value.num_peers_out);
	vnx::write_value(_buf + 83, value.min_sync_peers);
	vnx::write_value(_buf + 87, value.max_peer_set);
	vnx::write_value(_buf + 91, value.max_sent_cache);
	vnx::write_value(_buf + 95, value.max_hash_cache);
	vnx::write_value(_buf + 99, value.vdf_credits);
	vnx::write_value(_buf + 103, value.block_credits);
	vnx::write_value(_buf + 107, value.proof_credits);
	vnx::write_value(_buf + 111, value.vdf_relay_cost);
	vnx::write_value(_buf + 115, value.proof_relay_cost);
	vnx::write_value(_buf + 119, value.block_relay_cost);
	vnx::write_value(_buf + 123, value.max_node_credits);
	vnx::write_value(_buf + 127, value.max_farmer_credits);
	vnx::write_value(_buf + 131, value.node_version);
	vnx::write_value(_buf + 135, value.do_relay);
	vnx::write_value(_buf + 136, value.max_tx_upload);
	vnx::write_value(_buf + 144, value.max_pending_cost);
	vnx::write(out, value.host, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.input_vdfs, type_code, type_code->fields[12].code.data());
	vnx::write(out, value.input_verified_vdfs, type_code, type_code->fields[13].code.data());
	vnx::write(out, value.input_verified_proof, type_code, type_code->fields[14].code.data());
	vnx::write(out, value.input_verified_blocks, type_code, type_code->fields[15].code.data());
	vnx::write(out, value.input_verified_transactions, type_code, type_code->fields[16].code.data());
	vnx::write(out, value.input_transactions, type_code, type_code->fields[17].code.data());
	vnx::write(out, value.output_vdfs, type_code, type_code->fields[18].code.data());
	vnx::write(out, value.output_proof, type_code, type_code->fields[19].code.data());
	vnx::write(out, value.output_blocks, type_code, type_code->fields[20].code.data());
	vnx::write(out, value.output_transactions, type_code, type_code->fields[21].code.data());
	vnx::write(out, value.mode, type_code, type_code->fields[47].code.data());
	vnx::write(out, value.seed_peers, type_code, type_code->fields[51].code.data());
	vnx::write(out, value.fixed_peers, type_code, type_code->fields[52].code.data());
	vnx::write(out, value.block_peers, type_code, type_code->fields[53].code.data());
	vnx::write(out, value.storage_path, type_code, type_code->fields[54].code.data());
	vnx::write(out, value.node_server, type_code, type_code->fields[55].code.data());
}

void read(std::istream& in, ::mmx::RouterBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::mmx::RouterBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::mmx::RouterBase& value) {
	value.accept(visitor);
}

} // vnx
