
// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/WalletAsyncClient.hxx>
#include <mmx/Contract.hxx>
#include <mmx/FarmerKeys.hxx>
#include <mmx/Solution.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/Wallet_accept_offer.hxx>
#include <mmx/Wallet_accept_offer_return.hxx>
#include <mmx/Wallet_add_account.hxx>
#include <mmx/Wallet_add_account_return.hxx>
#include <mmx/Wallet_add_token.hxx>
#include <mmx/Wallet_add_token_return.hxx>
#include <mmx/Wallet_cancel_offer.hxx>
#include <mmx/Wallet_cancel_offer_return.hxx>
#include <mmx/Wallet_complete.hxx>
#include <mmx/Wallet_complete_return.hxx>
#include <mmx/Wallet_create_account.hxx>
#include <mmx/Wallet_create_account_return.hxx>
#include <mmx/Wallet_create_wallet.hxx>
#include <mmx/Wallet_create_wallet_return.hxx>
#include <mmx/Wallet_deploy.hxx>
#include <mmx/Wallet_deploy_return.hxx>
#include <mmx/Wallet_deposit.hxx>
#include <mmx/Wallet_deposit_return.hxx>
#include <mmx/Wallet_execute.hxx>
#include <mmx/Wallet_execute_return.hxx>
#include <mmx/Wallet_gather_inputs_for.hxx>
#include <mmx/Wallet_gather_inputs_for_return.hxx>
#include <mmx/Wallet_get_account.hxx>
#include <mmx/Wallet_get_account_return.hxx>
#include <mmx/Wallet_get_address.hxx>
#include <mmx/Wallet_get_address_return.hxx>
#include <mmx/Wallet_get_address_info.hxx>
#include <mmx/Wallet_get_address_info_return.hxx>
#include <mmx/Wallet_get_all_accounts.hxx>
#include <mmx/Wallet_get_all_accounts_return.hxx>
#include <mmx/Wallet_get_all_address_infos.hxx>
#include <mmx/Wallet_get_all_address_infos_return.hxx>
#include <mmx/Wallet_get_all_addresses.hxx>
#include <mmx/Wallet_get_all_addresses_return.hxx>
#include <mmx/Wallet_get_all_farmer_keys.hxx>
#include <mmx/Wallet_get_all_farmer_keys_return.hxx>
#include <mmx/Wallet_get_balance.hxx>
#include <mmx/Wallet_get_balance_return.hxx>
#include <mmx/Wallet_get_balances.hxx>
#include <mmx/Wallet_get_balances_return.hxx>
#include <mmx/Wallet_get_contract_balances.hxx>
#include <mmx/Wallet_get_contract_balances_return.hxx>
#include <mmx/Wallet_get_contracts.hxx>
#include <mmx/Wallet_get_contracts_return.hxx>
#include <mmx/Wallet_get_farmer_keys.hxx>
#include <mmx/Wallet_get_farmer_keys_return.hxx>
#include <mmx/Wallet_get_history.hxx>
#include <mmx/Wallet_get_history_return.hxx>
#include <mmx/Wallet_get_master_seed.hxx>
#include <mmx/Wallet_get_master_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_seed.hxx>
#include <mmx/Wallet_get_mnemonic_seed_return.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist.hxx>
#include <mmx/Wallet_get_mnemonic_wordlist_return.hxx>
#include <mmx/Wallet_get_token_list.hxx>
#include <mmx/Wallet_get_token_list_return.hxx>
#include <mmx/Wallet_get_total_balances_for.hxx>
#include <mmx/Wallet_get_total_balances_for_return.hxx>
#include <mmx/Wallet_get_tx_history.hxx>
#include <mmx/Wallet_get_tx_history_return.hxx>
#include <mmx/Wallet_is_locked.hxx>
#include <mmx/Wallet_is_locked_return.hxx>
#include <mmx/Wallet_lock.hxx>
#include <mmx/Wallet_lock_return.hxx>
#include <mmx/Wallet_make_offer.hxx>
#include <mmx/Wallet_make_offer_return.hxx>
#include <mmx/Wallet_mark_spent.hxx>
#include <mmx/Wallet_mark_spent_return.hxx>
#include <mmx/Wallet_mint.hxx>
#include <mmx/Wallet_mint_return.hxx>
#include <mmx/Wallet_mutate.hxx>
#include <mmx/Wallet_mutate_return.hxx>
#include <mmx/Wallet_release.hxx>
#include <mmx/Wallet_release_return.hxx>
#include <mmx/Wallet_release_all.hxx>
#include <mmx/Wallet_release_all_return.hxx>
#include <mmx/Wallet_rem_token.hxx>
#include <mmx/Wallet_rem_token_return.hxx>
#include <mmx/Wallet_reserve.hxx>
#include <mmx/Wallet_reserve_return.hxx>
#include <mmx/Wallet_reset_cache.hxx>
#include <mmx/Wallet_reset_cache_return.hxx>
#include <mmx/Wallet_send.hxx>
#include <mmx/Wallet_send_return.hxx>
#include <mmx/Wallet_send_from.hxx>
#include <mmx/Wallet_send_from_return.hxx>
#include <mmx/Wallet_send_many.hxx>
#include <mmx/Wallet_send_many_return.hxx>
#include <mmx/Wallet_send_off.hxx>
#include <mmx/Wallet_send_off_return.hxx>
#include <mmx/Wallet_sign_msg.hxx>
#include <mmx/Wallet_sign_msg_return.hxx>
#include <mmx/Wallet_sign_off.hxx>
#include <mmx/Wallet_sign_off_return.hxx>
#include <mmx/Wallet_unlock.hxx>
#include <mmx/Wallet_unlock_return.hxx>
#include <mmx/Wallet_update_cache.hxx>
#include <mmx/Wallet_update_cache_return.hxx>
#include <mmx/account_t.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/address_info_t.hxx>
#include <mmx/balance_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/spend_options_t.hxx>
#include <mmx/tx_entry_t.hxx>
#include <mmx/tx_log_entry_t.hxx>
#include <mmx/txin_t.hxx>
#include <mmx/uint128.hpp>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/Object.hpp>
#include <vnx/Variant.hpp>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpData.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace mmx {

WalletAsyncClient::WalletAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

WalletAsyncClient::WalletAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

uint64_t WalletAsyncClient::send(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& dst_addr, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_send::create();
	_method->index = index;
	_method->amount = amount;
	_method->dst_addr = dst_addr;
	_method->currency = currency;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 0;
		vnx_queue_send[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::send_many(const uint32_t& index, const std::map<::mmx::addr_t, uint64_t>& amounts, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_send_many::create();
	_method->index = index;
	_method->amounts = amounts;
	_method->currency = currency;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 1;
		vnx_queue_send_many[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::send_from(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& dst_addr, const ::mmx::addr_t& src_addr, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_send_from::create();
	_method->index = index;
	_method->amount = amount;
	_method->dst_addr = dst_addr;
	_method->src_addr = src_addr;
	_method->currency = currency;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 2;
		vnx_queue_send_from[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::mint(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& dst_addr, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_mint::create();
	_method->index = index;
	_method->amount = amount;
	_method->dst_addr = dst_addr;
	_method->currency = currency;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 3;
		vnx_queue_mint[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::deploy(const uint32_t& index, std::shared_ptr<const ::mmx::Contract> contract, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_deploy::create();
	_method->index = index;
	_method->contract = contract;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 4;
		vnx_queue_deploy[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::mutate(const uint32_t& index, const ::mmx::addr_t& address, const ::vnx::Object& method, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_mutate::create();
	_method->index = index;
	_method->address = address;
	_method->method = method;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 5;
		vnx_queue_mutate[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::execute(const uint32_t& index, const ::mmx::addr_t& address, const std::string& method, const std::vector<::vnx::Variant>& args, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_execute::create();
	_method->index = index;
	_method->address = address;
	_method->method = method;
	_method->args = args;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 6;
		vnx_queue_execute[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::deposit(const uint32_t& index, const ::mmx::addr_t& address, const std::string& method, const std::vector<::vnx::Variant>& args, const uint64_t& amount, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_deposit::create();
	_method->index = index;
	_method->address = address;
	_method->method = method;
	_method->args = args;
	_method->amount = amount;
	_method->currency = currency;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 7;
		vnx_queue_deposit[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::make_offer(const uint32_t& index, const uint32_t& owner, const uint64_t& bid_amount, const ::mmx::addr_t& bid_currency, const uint64_t& ask_amount, const ::mmx::addr_t& ask_currency, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_make_offer::create();
	_method->index = index;
	_method->owner = owner;
	_method->bid_amount = bid_amount;
	_method->bid_currency = bid_currency;
	_method->ask_amount = ask_amount;
	_method->ask_currency = ask_currency;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 8;
		vnx_queue_make_offer[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::accept_offer(const uint32_t& index, const ::mmx::addr_t& address, const uint32_t& dst_addr, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_accept_offer::create();
	_method->index = index;
	_method->address = address;
	_method->dst_addr = dst_addr;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 9;
		vnx_queue_accept_offer[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::cancel_offer(const uint32_t& index, const ::mmx::addr_t& address, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_cancel_offer::create();
	_method->index = index;
	_method->address = address;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 10;
		vnx_queue_cancel_offer[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::complete(const uint32_t& index, std::shared_ptr<const ::mmx::Transaction> tx, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_complete::create();
	_method->index = index;
	_method->tx = tx;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 11;
		vnx_queue_complete[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::sign_off(const uint32_t& index, std::shared_ptr<const ::mmx::Transaction> tx, const ::mmx::spend_options_t& options, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_sign_off::create();
	_method->index = index;
	_method->tx = tx;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 12;
		vnx_queue_sign_off[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::sign_msg(const uint32_t& index, const ::mmx::addr_t& address, const ::mmx::hash_t& msg, const std::function<void(std::shared_ptr<const ::mmx::Solution>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_sign_msg::create();
	_method->index = index;
	_method->address = address;
	_method->msg = msg;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 13;
		vnx_queue_sign_msg[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::send_off(const uint32_t& index, std::shared_ptr<const ::mmx::Transaction> tx, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_send_off::create();
	_method->index = index;
	_method->tx = tx;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 14;
		vnx_queue_send_off[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::mark_spent(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_mark_spent::create();
	_method->index = index;
	_method->amounts = amounts;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 15;
		vnx_queue_mark_spent[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::reserve(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_reserve::create();
	_method->index = index;
	_method->amounts = amounts;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 16;
		vnx_queue_reserve[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::release(const uint32_t& index, const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>& amounts, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_release::create();
	_method->index = index;
	_method->amounts = amounts;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 17;
		vnx_queue_release[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::release_all(const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_release_all::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 18;
		vnx_queue_release_all[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::reset_cache(const uint32_t& index, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_reset_cache::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 19;
		vnx_queue_reset_cache[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::update_cache(const uint32_t& index, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_update_cache::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 20;
		vnx_queue_update_cache[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_history(const uint32_t& index, const int32_t& since, const std::function<void(const std::vector<::mmx::tx_entry_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_history::create();
	_method->index = index;
	_method->since = since;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 21;
		vnx_queue_get_history[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_tx_history(const uint32_t& index, const int32_t& limit, const uint32_t& offset, const std::function<void(const std::vector<::mmx::tx_log_entry_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_tx_history::create();
	_method->index = index;
	_method->limit = limit;
	_method->offset = offset;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 22;
		vnx_queue_get_tx_history[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::gather_inputs_for(const uint32_t& index, const uint64_t& amount, const ::mmx::addr_t& currency, const ::mmx::spend_options_t& options, const std::function<void(const std::vector<::mmx::txin_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_gather_inputs_for::create();
	_method->index = index;
	_method->amount = amount;
	_method->currency = currency;
	_method->options = options;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 23;
		vnx_queue_gather_inputs_for[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_balance(const uint32_t& index, const ::mmx::addr_t& currency, const uint32_t& min_confirm, const std::function<void(const ::mmx::balance_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_balance::create();
	_method->index = index;
	_method->currency = currency;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 24;
		vnx_queue_get_balance[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_balances(const uint32_t& index, const uint32_t& min_confirm, const std::function<void(const std::map<::mmx::addr_t, ::mmx::balance_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_balances::create();
	_method->index = index;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 25;
		vnx_queue_get_balances[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_total_balances_for(const std::vector<::mmx::addr_t>& addresses, const uint32_t& min_confirm, const std::function<void(const std::map<::mmx::addr_t, ::mmx::balance_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_total_balances_for::create();
	_method->addresses = addresses;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 26;
		vnx_queue_get_total_balances_for[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_contract_balances(const ::mmx::addr_t& address, const uint32_t& min_confirm, const std::function<void(const std::map<::mmx::addr_t, ::mmx::balance_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_contract_balances::create();
	_method->address = address;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 27;
		vnx_queue_get_contract_balances[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_contracts(const uint32_t& index, const std::function<void(const std::map<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_contracts::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 28;
		vnx_queue_get_contracts[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_address(const uint32_t& index, const uint32_t& offset, const std::function<void(const ::mmx::addr_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_address::create();
	_method->index = index;
	_method->offset = offset;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 29;
		vnx_queue_get_address[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_all_addresses(const int32_t& index, const std::function<void(const std::vector<::mmx::addr_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_all_addresses::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 30;
		vnx_queue_get_all_addresses[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_address_info(const uint32_t& index, const uint32_t& offset, const std::function<void(const ::mmx::address_info_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_address_info::create();
	_method->index = index;
	_method->offset = offset;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 31;
		vnx_queue_get_address_info[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_all_address_infos(const int32_t& index, const std::function<void(const std::vector<::mmx::address_info_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_all_address_infos::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 32;
		vnx_queue_get_all_address_infos[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_account(const uint32_t& index, const std::function<void(const ::mmx::account_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_account::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 33;
		vnx_queue_get_account[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_all_accounts(const std::function<void(const std::map<uint32_t, ::mmx::account_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_all_accounts::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 34;
		vnx_queue_get_all_accounts[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::is_locked(const uint32_t& index, const std::function<void(const vnx::bool_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_is_locked::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 35;
		vnx_queue_is_locked[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::lock(const uint32_t& index, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_lock::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 36;
		vnx_queue_lock[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::unlock(const uint32_t& index, const std::string& passphrase, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_unlock::create();
	_method->index = index;
	_method->passphrase = passphrase;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 37;
		vnx_queue_unlock[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::add_account(const uint32_t& index, const ::mmx::account_t& config, const vnx::optional<std::string>& passphrase, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_add_account::create();
	_method->index = index;
	_method->config = config;
	_method->passphrase = passphrase;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 38;
		vnx_queue_add_account[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::create_account(const ::mmx::account_t& config, const vnx::optional<std::string>& passphrase, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_create_account::create();
	_method->config = config;
	_method->passphrase = passphrase;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 39;
		vnx_queue_create_account[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::create_wallet(const ::mmx::account_t& config, const vnx::optional<std::string>& words, const vnx::optional<std::string>& passphrase, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_create_wallet::create();
	_method->config = config;
	_method->words = words;
	_method->passphrase = passphrase;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 40;
		vnx_queue_create_wallet[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_mnemonic_wordlist(const std::string& lang, const std::function<void(const std::vector<std::string>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_mnemonic_wordlist::create();
	_method->lang = lang;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 41;
		vnx_queue_get_mnemonic_wordlist[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_token_list(const std::function<void(const std::set<::mmx::addr_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_token_list::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 42;
		vnx_queue_get_token_list[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::add_token(const ::mmx::addr_t& address, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_add_token::create();
	_method->address = address;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 43;
		vnx_queue_add_token[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::rem_token(const ::mmx::addr_t& address, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_rem_token::create();
	_method->address = address;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 44;
		vnx_queue_rem_token[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_master_seed(const uint32_t& index, const std::function<void(const ::mmx::hash_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_master_seed::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 45;
		vnx_queue_get_master_seed[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_mnemonic_seed(const uint32_t& index, const std::function<void(const std::vector<std::string>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_mnemonic_seed::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 46;
		vnx_queue_get_mnemonic_seed[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_farmer_keys(const uint32_t& index, const std::function<void(std::shared_ptr<const ::mmx::FarmerKeys>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_farmer_keys::create();
	_method->index = index;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 47;
		vnx_queue_get_farmer_keys[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::get_all_farmer_keys(const std::function<void(const std::vector<std::shared_ptr<const ::mmx::FarmerKeys>>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Wallet_get_all_farmer_keys::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 48;
		vnx_queue_get_all_farmer_keys[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::http_request(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const std::function<void(std::shared_ptr<const ::vnx::addons::HttpResponse>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::addons::HttpComponent_http_request::create();
	_method->request = request;
	_method->sub_path = sub_path;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 49;
		vnx_queue_http_request[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::http_request_chunk(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const int64_t& offset, const int64_t& max_bytes, const std::function<void(std::shared_ptr<const ::vnx::addons::HttpData>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::addons::HttpComponent_http_request_chunk::create();
	_method->request = request;
	_method->sub_path = sub_path;
	_method->offset = offset;
	_method->max_bytes = max_bytes;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 50;
		vnx_queue_http_request_chunk[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_get_config_object(const std::function<void(const ::vnx::Object&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config_object::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 51;
		vnx_queue_vnx_get_config_object[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_get_config(const std::string& name, const std::function<void(const ::vnx::Variant&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config::create();
	_method->name = name;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 52;
		vnx_queue_vnx_get_config[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_set_config_object(const ::vnx::Object& config, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 53;
		vnx_queue_vnx_set_config_object[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_set_config(const std::string& name, const ::vnx::Variant& value, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 54;
		vnx_queue_vnx_set_config[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_get_type_code(const std::function<void(const ::vnx::TypeCode&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 55;
		vnx_queue_vnx_get_type_code[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_get_module_info(const std::function<void(std::shared_ptr<const ::vnx::ModuleInfo>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_module_info::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 56;
		vnx_queue_vnx_get_module_info[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_restart(const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 57;
		vnx_queue_vnx_restart[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_stop(const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 58;
		vnx_queue_vnx_stop[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t WalletAsyncClient::vnx_self_test(const std::function<void(const vnx::bool_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_self_test::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 59;
		vnx_queue_vnx_self_test[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

int32_t WalletAsyncClient::vnx_purge_request(uint64_t _request_id, const vnx::exception& _ex) {
	std::unique_lock<std::mutex> _lock(vnx_mutex);
	const auto _iter = vnx_pending.find(_request_id);
	if(_iter == vnx_pending.end()) {
		return -1;
	}
	const auto _index = _iter->second;
	vnx_pending.erase(_iter);
	switch(_index) {
		case 0: {
			const auto _iter = vnx_queue_send.find(_request_id);
			if(_iter != vnx_queue_send.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_send.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 1: {
			const auto _iter = vnx_queue_send_many.find(_request_id);
			if(_iter != vnx_queue_send_many.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_send_many.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 2: {
			const auto _iter = vnx_queue_send_from.find(_request_id);
			if(_iter != vnx_queue_send_from.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_send_from.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 3: {
			const auto _iter = vnx_queue_mint.find(_request_id);
			if(_iter != vnx_queue_mint.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_mint.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 4: {
			const auto _iter = vnx_queue_deploy.find(_request_id);
			if(_iter != vnx_queue_deploy.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_deploy.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 5: {
			const auto _iter = vnx_queue_mutate.find(_request_id);
			if(_iter != vnx_queue_mutate.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_mutate.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 6: {
			const auto _iter = vnx_queue_execute.find(_request_id);
			if(_iter != vnx_queue_execute.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_execute.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 7: {
			const auto _iter = vnx_queue_deposit.find(_request_id);
			if(_iter != vnx_queue_deposit.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_deposit.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 8: {
			const auto _iter = vnx_queue_make_offer.find(_request_id);
			if(_iter != vnx_queue_make_offer.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_make_offer.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 9: {
			const auto _iter = vnx_queue_accept_offer.find(_request_id);
			if(_iter != vnx_queue_accept_offer.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_accept_offer.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 10: {
			const auto _iter = vnx_queue_cancel_offer.find(_request_id);
			if(_iter != vnx_queue_cancel_offer.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_cancel_offer.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 11: {
			const auto _iter = vnx_queue_complete.find(_request_id);
			if(_iter != vnx_queue_complete.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_complete.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 12: {
			const auto _iter = vnx_queue_sign_off.find(_request_id);
			if(_iter != vnx_queue_sign_off.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_sign_off.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 13: {
			const auto _iter = vnx_queue_sign_msg.find(_request_id);
			if(_iter != vnx_queue_sign_msg.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_sign_msg.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 14: {
			const auto _iter = vnx_queue_send_off.find(_request_id);
			if(_iter != vnx_queue_send_off.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_send_off.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 15: {
			const auto _iter = vnx_queue_mark_spent.find(_request_id);
			if(_iter != vnx_queue_mark_spent.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_mark_spent.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 16: {
			const auto _iter = vnx_queue_reserve.find(_request_id);
			if(_iter != vnx_queue_reserve.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_reserve.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 17: {
			const auto _iter = vnx_queue_release.find(_request_id);
			if(_iter != vnx_queue_release.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_release.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 18: {
			const auto _iter = vnx_queue_release_all.find(_request_id);
			if(_iter != vnx_queue_release_all.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_release_all.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 19: {
			const auto _iter = vnx_queue_reset_cache.find(_request_id);
			if(_iter != vnx_queue_reset_cache.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_reset_cache.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 20: {
			const auto _iter = vnx_queue_update_cache.find(_request_id);
			if(_iter != vnx_queue_update_cache.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_update_cache.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 21: {
			const auto _iter = vnx_queue_get_history.find(_request_id);
			if(_iter != vnx_queue_get_history.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_history.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 22: {
			const auto _iter = vnx_queue_get_tx_history.find(_request_id);
			if(_iter != vnx_queue_get_tx_history.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_tx_history.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 23: {
			const auto _iter = vnx_queue_gather_inputs_for.find(_request_id);
			if(_iter != vnx_queue_gather_inputs_for.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_gather_inputs_for.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 24: {
			const auto _iter = vnx_queue_get_balance.find(_request_id);
			if(_iter != vnx_queue_get_balance.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_balance.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 25: {
			const auto _iter = vnx_queue_get_balances.find(_request_id);
			if(_iter != vnx_queue_get_balances.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_balances.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 26: {
			const auto _iter = vnx_queue_get_total_balances_for.find(_request_id);
			if(_iter != vnx_queue_get_total_balances_for.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_total_balances_for.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 27: {
			const auto _iter = vnx_queue_get_contract_balances.find(_request_id);
			if(_iter != vnx_queue_get_contract_balances.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contract_balances.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 28: {
			const auto _iter = vnx_queue_get_contracts.find(_request_id);
			if(_iter != vnx_queue_get_contracts.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contracts.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 29: {
			const auto _iter = vnx_queue_get_address.find(_request_id);
			if(_iter != vnx_queue_get_address.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_address.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 30: {
			const auto _iter = vnx_queue_get_all_addresses.find(_request_id);
			if(_iter != vnx_queue_get_all_addresses.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_all_addresses.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 31: {
			const auto _iter = vnx_queue_get_address_info.find(_request_id);
			if(_iter != vnx_queue_get_address_info.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_address_info.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 32: {
			const auto _iter = vnx_queue_get_all_address_infos.find(_request_id);
			if(_iter != vnx_queue_get_all_address_infos.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_all_address_infos.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 33: {
			const auto _iter = vnx_queue_get_account.find(_request_id);
			if(_iter != vnx_queue_get_account.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_account.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 34: {
			const auto _iter = vnx_queue_get_all_accounts.find(_request_id);
			if(_iter != vnx_queue_get_all_accounts.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_all_accounts.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 35: {
			const auto _iter = vnx_queue_is_locked.find(_request_id);
			if(_iter != vnx_queue_is_locked.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_is_locked.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 36: {
			const auto _iter = vnx_queue_lock.find(_request_id);
			if(_iter != vnx_queue_lock.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_lock.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 37: {
			const auto _iter = vnx_queue_unlock.find(_request_id);
			if(_iter != vnx_queue_unlock.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_unlock.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 38: {
			const auto _iter = vnx_queue_add_account.find(_request_id);
			if(_iter != vnx_queue_add_account.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_add_account.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 39: {
			const auto _iter = vnx_queue_create_account.find(_request_id);
			if(_iter != vnx_queue_create_account.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_create_account.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 40: {
			const auto _iter = vnx_queue_create_wallet.find(_request_id);
			if(_iter != vnx_queue_create_wallet.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_create_wallet.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 41: {
			const auto _iter = vnx_queue_get_mnemonic_wordlist.find(_request_id);
			if(_iter != vnx_queue_get_mnemonic_wordlist.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_mnemonic_wordlist.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 42: {
			const auto _iter = vnx_queue_get_token_list.find(_request_id);
			if(_iter != vnx_queue_get_token_list.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_token_list.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 43: {
			const auto _iter = vnx_queue_add_token.find(_request_id);
			if(_iter != vnx_queue_add_token.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_add_token.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 44: {
			const auto _iter = vnx_queue_rem_token.find(_request_id);
			if(_iter != vnx_queue_rem_token.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_rem_token.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 45: {
			const auto _iter = vnx_queue_get_master_seed.find(_request_id);
			if(_iter != vnx_queue_get_master_seed.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_master_seed.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 46: {
			const auto _iter = vnx_queue_get_mnemonic_seed.find(_request_id);
			if(_iter != vnx_queue_get_mnemonic_seed.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_mnemonic_seed.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 47: {
			const auto _iter = vnx_queue_get_farmer_keys.find(_request_id);
			if(_iter != vnx_queue_get_farmer_keys.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_farmer_keys.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 48: {
			const auto _iter = vnx_queue_get_all_farmer_keys.find(_request_id);
			if(_iter != vnx_queue_get_all_farmer_keys.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_all_farmer_keys.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 49: {
			const auto _iter = vnx_queue_http_request.find(_request_id);
			if(_iter != vnx_queue_http_request.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_http_request.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 50: {
			const auto _iter = vnx_queue_http_request_chunk.find(_request_id);
			if(_iter != vnx_queue_http_request_chunk.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_http_request_chunk.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 51: {
			const auto _iter = vnx_queue_vnx_get_config_object.find(_request_id);
			if(_iter != vnx_queue_vnx_get_config_object.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_config_object.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 52: {
			const auto _iter = vnx_queue_vnx_get_config.find(_request_id);
			if(_iter != vnx_queue_vnx_get_config.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_config.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 53: {
			const auto _iter = vnx_queue_vnx_set_config_object.find(_request_id);
			if(_iter != vnx_queue_vnx_set_config_object.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_set_config_object.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 54: {
			const auto _iter = vnx_queue_vnx_set_config.find(_request_id);
			if(_iter != vnx_queue_vnx_set_config.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_set_config.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 55: {
			const auto _iter = vnx_queue_vnx_get_type_code.find(_request_id);
			if(_iter != vnx_queue_vnx_get_type_code.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_type_code.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 56: {
			const auto _iter = vnx_queue_vnx_get_module_info.find(_request_id);
			if(_iter != vnx_queue_vnx_get_module_info.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_module_info.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 57: {
			const auto _iter = vnx_queue_vnx_restart.find(_request_id);
			if(_iter != vnx_queue_vnx_restart.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_restart.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 58: {
			const auto _iter = vnx_queue_vnx_stop.find(_request_id);
			if(_iter != vnx_queue_vnx_stop.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_stop.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 59: {
			const auto _iter = vnx_queue_vnx_self_test.find(_request_id);
			if(_iter != vnx_queue_vnx_self_test.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_self_test.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
	}
	return _index;
}

int32_t WalletAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) {
	std::unique_lock<std::mutex> _lock(vnx_mutex);
	const auto _iter = vnx_pending.find(_request_id);
	if(_iter == vnx_pending.end()) {
		throw std::runtime_error("WalletAsyncClient: received unknown return");
	}
	const auto _index = _iter->second;
	vnx_pending.erase(_iter);
	switch(_index) {
		case 0: {
			const auto _iter = vnx_queue_send.find(_request_id);
			if(_iter == vnx_queue_send.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_send.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_send_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 1: {
			const auto _iter = vnx_queue_send_many.find(_request_id);
			if(_iter == vnx_queue_send_many.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_send_many.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_send_many_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 2: {
			const auto _iter = vnx_queue_send_from.find(_request_id);
			if(_iter == vnx_queue_send_from.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_send_from.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_send_from_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 3: {
			const auto _iter = vnx_queue_mint.find(_request_id);
			if(_iter == vnx_queue_mint.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_mint.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_mint_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 4: {
			const auto _iter = vnx_queue_deploy.find(_request_id);
			if(_iter == vnx_queue_deploy.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_deploy.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_deploy_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 5: {
			const auto _iter = vnx_queue_mutate.find(_request_id);
			if(_iter == vnx_queue_mutate.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_mutate.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_mutate_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 6: {
			const auto _iter = vnx_queue_execute.find(_request_id);
			if(_iter == vnx_queue_execute.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_execute.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_execute_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 7: {
			const auto _iter = vnx_queue_deposit.find(_request_id);
			if(_iter == vnx_queue_deposit.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_deposit.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_deposit_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 8: {
			const auto _iter = vnx_queue_make_offer.find(_request_id);
			if(_iter == vnx_queue_make_offer.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_make_offer.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_make_offer_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 9: {
			const auto _iter = vnx_queue_accept_offer.find(_request_id);
			if(_iter == vnx_queue_accept_offer.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_accept_offer.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_accept_offer_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 10: {
			const auto _iter = vnx_queue_cancel_offer.find(_request_id);
			if(_iter == vnx_queue_cancel_offer.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_cancel_offer.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_cancel_offer_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 11: {
			const auto _iter = vnx_queue_complete.find(_request_id);
			if(_iter == vnx_queue_complete.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_complete.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_complete_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 12: {
			const auto _iter = vnx_queue_sign_off.find(_request_id);
			if(_iter == vnx_queue_sign_off.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_sign_off.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_sign_off_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 13: {
			const auto _iter = vnx_queue_sign_msg.find(_request_id);
			if(_iter == vnx_queue_sign_msg.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_sign_msg.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_sign_msg_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Solution>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 14: {
			const auto _iter = vnx_queue_send_off.find(_request_id);
			if(_iter == vnx_queue_send_off.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_send_off.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 15: {
			const auto _iter = vnx_queue_mark_spent.find(_request_id);
			if(_iter == vnx_queue_mark_spent.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_mark_spent.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 16: {
			const auto _iter = vnx_queue_reserve.find(_request_id);
			if(_iter == vnx_queue_reserve.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_reserve.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 17: {
			const auto _iter = vnx_queue_release.find(_request_id);
			if(_iter == vnx_queue_release.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_release.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 18: {
			const auto _iter = vnx_queue_release_all.find(_request_id);
			if(_iter == vnx_queue_release_all.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_release_all.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 19: {
			const auto _iter = vnx_queue_reset_cache.find(_request_id);
			if(_iter == vnx_queue_reset_cache.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_reset_cache.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 20: {
			const auto _iter = vnx_queue_update_cache.find(_request_id);
			if(_iter == vnx_queue_update_cache.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_update_cache.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 21: {
			const auto _iter = vnx_queue_get_history.find(_request_id);
			if(_iter == vnx_queue_get_history.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_history.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_history_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::tx_entry_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 22: {
			const auto _iter = vnx_queue_get_tx_history.find(_request_id);
			if(_iter == vnx_queue_get_tx_history.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_tx_history.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_tx_history_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::tx_log_entry_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 23: {
			const auto _iter = vnx_queue_gather_inputs_for.find(_request_id);
			if(_iter == vnx_queue_gather_inputs_for.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_gather_inputs_for.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_gather_inputs_for_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::txin_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 24: {
			const auto _iter = vnx_queue_get_balance.find(_request_id);
			if(_iter == vnx_queue_get_balance.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_balance.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_balance_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::balance_t>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 25: {
			const auto _iter = vnx_queue_get_balances.find(_request_id);
			if(_iter == vnx_queue_get_balances.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_balances.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_balances_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 26: {
			const auto _iter = vnx_queue_get_total_balances_for.find(_request_id);
			if(_iter == vnx_queue_get_total_balances_for.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_total_balances_for.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_total_balances_for_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 27: {
			const auto _iter = vnx_queue_get_contract_balances.find(_request_id);
			if(_iter == vnx_queue_get_contract_balances.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contract_balances.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_contract_balances_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 28: {
			const auto _iter = vnx_queue_get_contracts.find(_request_id);
			if(_iter == vnx_queue_get_contracts.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contracts.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_contracts_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 29: {
			const auto _iter = vnx_queue_get_address.find(_request_id);
			if(_iter == vnx_queue_get_address.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_address.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_address_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::addr_t>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 30: {
			const auto _iter = vnx_queue_get_all_addresses.find(_request_id);
			if(_iter == vnx_queue_get_all_addresses.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_all_addresses.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_addresses_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::addr_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 31: {
			const auto _iter = vnx_queue_get_address_info.find(_request_id);
			if(_iter == vnx_queue_get_address_info.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_address_info.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_address_info_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::address_info_t>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 32: {
			const auto _iter = vnx_queue_get_all_address_infos.find(_request_id);
			if(_iter == vnx_queue_get_all_address_infos.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_all_address_infos.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_address_infos_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::address_info_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 33: {
			const auto _iter = vnx_queue_get_account.find(_request_id);
			if(_iter == vnx_queue_get_account.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_account.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_account_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::account_t>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 34: {
			const auto _iter = vnx_queue_get_all_accounts.find(_request_id);
			if(_iter == vnx_queue_get_all_accounts.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_all_accounts.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_accounts_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<uint32_t, ::mmx::account_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 35: {
			const auto _iter = vnx_queue_is_locked.find(_request_id);
			if(_iter == vnx_queue_is_locked.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_is_locked.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_is_locked_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::bool_t>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 36: {
			const auto _iter = vnx_queue_lock.find(_request_id);
			if(_iter == vnx_queue_lock.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_lock.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 37: {
			const auto _iter = vnx_queue_unlock.find(_request_id);
			if(_iter == vnx_queue_unlock.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_unlock.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 38: {
			const auto _iter = vnx_queue_add_account.find(_request_id);
			if(_iter == vnx_queue_add_account.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_add_account.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 39: {
			const auto _iter = vnx_queue_create_account.find(_request_id);
			if(_iter == vnx_queue_create_account.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_create_account.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 40: {
			const auto _iter = vnx_queue_create_wallet.find(_request_id);
			if(_iter == vnx_queue_create_wallet.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_create_wallet.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 41: {
			const auto _iter = vnx_queue_get_mnemonic_wordlist.find(_request_id);
			if(_iter == vnx_queue_get_mnemonic_wordlist.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_mnemonic_wordlist.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_mnemonic_wordlist_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<std::string>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 42: {
			const auto _iter = vnx_queue_get_token_list.find(_request_id);
			if(_iter == vnx_queue_get_token_list.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_token_list.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_token_list_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::set<::mmx::addr_t>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 43: {
			const auto _iter = vnx_queue_add_token.find(_request_id);
			if(_iter == vnx_queue_add_token.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_add_token.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 44: {
			const auto _iter = vnx_queue_rem_token.find(_request_id);
			if(_iter == vnx_queue_rem_token.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_rem_token.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 45: {
			const auto _iter = vnx_queue_get_master_seed.find(_request_id);
			if(_iter == vnx_queue_get_master_seed.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_master_seed.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_master_seed_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::hash_t>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 46: {
			const auto _iter = vnx_queue_get_mnemonic_seed.find(_request_id);
			if(_iter == vnx_queue_get_mnemonic_seed.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_mnemonic_seed.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_mnemonic_seed_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<std::string>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 47: {
			const auto _iter = vnx_queue_get_farmer_keys.find(_request_id);
			if(_iter == vnx_queue_get_farmer_keys.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_farmer_keys.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_farmer_keys_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::FarmerKeys>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 48: {
			const auto _iter = vnx_queue_get_all_farmer_keys.find(_request_id);
			if(_iter == vnx_queue_get_all_farmer_keys.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_all_farmer_keys.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Wallet_get_all_farmer_keys_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::FarmerKeys>>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 49: {
			const auto _iter = vnx_queue_http_request.find(_request_id);
			if(_iter == vnx_queue_http_request.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_http_request.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpResponse>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 50: {
			const auto _iter = vnx_queue_http_request_chunk.find(_request_id);
			if(_iter == vnx_queue_http_request_chunk.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_http_request_chunk.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_chunk_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpData>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 51: {
			const auto _iter = vnx_queue_vnx_get_config_object.find(_request_id);
			if(_iter == vnx_queue_vnx_get_config_object.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_config_object.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::vnx::Object>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 52: {
			const auto _iter = vnx_queue_vnx_get_config.find(_request_id);
			if(_iter == vnx_queue_vnx_get_config.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_config.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::vnx::Variant>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 53: {
			const auto _iter = vnx_queue_vnx_set_config_object.find(_request_id);
			if(_iter == vnx_queue_vnx_set_config_object.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_set_config_object.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 54: {
			const auto _iter = vnx_queue_vnx_set_config.find(_request_id);
			if(_iter == vnx_queue_vnx_set_config.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_set_config.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 55: {
			const auto _iter = vnx_queue_vnx_get_type_code.find(_request_id);
			if(_iter == vnx_queue_vnx_get_type_code.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_type_code.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::vnx::TypeCode>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 56: {
			const auto _iter = vnx_queue_vnx_get_module_info.find(_request_id);
			if(_iter == vnx_queue_vnx_get_module_info.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_module_info.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::ModuleInfo>>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 57: {
			const auto _iter = vnx_queue_vnx_restart.find(_request_id);
			if(_iter == vnx_queue_vnx_restart.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_restart.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 58: {
			const auto _iter = vnx_queue_vnx_stop.find(_request_id);
			if(_iter == vnx_queue_vnx_stop.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_stop.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 59: {
			const auto _iter = vnx_queue_vnx_self_test.find(_request_id);
			if(_iter == vnx_queue_vnx_self_test.end()) {
				throw std::runtime_error("WalletAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_self_test.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::bool_t>());
				} else {
					throw std::logic_error("WalletAsyncClient: invalid return value");
				}
			}
			break;
		}
		default:
			if(_index >= 0) {
				throw std::logic_error("WalletAsyncClient: invalid callback index");
			}
	}
	return _index;
}


} // namespace mmx
