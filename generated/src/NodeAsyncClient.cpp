
// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/NodeAsyncClient.hxx>
#include <mmx/Block.hxx>
#include <mmx/BlockHeader.hxx>
#include <mmx/ChainParams.hxx>
#include <mmx/Contract.hxx>
#include <mmx/NetworkInfo.hxx>
#include <mmx/Node_add_block.hxx>
#include <mmx/Node_add_block_return.hxx>
#include <mmx/Node_add_transaction.hxx>
#include <mmx/Node_add_transaction_return.hxx>
#include <mmx/Node_call_contract.hxx>
#include <mmx/Node_call_contract_return.hxx>
#include <mmx/Node_dump_storage.hxx>
#include <mmx/Node_dump_storage_return.hxx>
#include <mmx/Node_get_address_info.hxx>
#include <mmx/Node_get_address_info_return.hxx>
#include <mmx/Node_get_all_balances.hxx>
#include <mmx/Node_get_all_balances_return.hxx>
#include <mmx/Node_get_balance.hxx>
#include <mmx/Node_get_balance_return.hxx>
#include <mmx/Node_get_balances.hxx>
#include <mmx/Node_get_balances_return.hxx>
#include <mmx/Node_get_block.hxx>
#include <mmx/Node_get_block_return.hxx>
#include <mmx/Node_get_block_at.hxx>
#include <mmx/Node_get_block_at_return.hxx>
#include <mmx/Node_get_block_hash.hxx>
#include <mmx/Node_get_block_hash_return.hxx>
#include <mmx/Node_get_contract.hxx>
#include <mmx/Node_get_contract_return.hxx>
#include <mmx/Node_get_contract_at.hxx>
#include <mmx/Node_get_contract_at_return.hxx>
#include <mmx/Node_get_contract_balances.hxx>
#include <mmx/Node_get_contract_balances_return.hxx>
#include <mmx/Node_get_contract_for.hxx>
#include <mmx/Node_get_contract_for_return.hxx>
#include <mmx/Node_get_contracts.hxx>
#include <mmx/Node_get_contracts_return.hxx>
#include <mmx/Node_get_contracts_by.hxx>
#include <mmx/Node_get_contracts_by_return.hxx>
#include <mmx/Node_get_exec_history.hxx>
#include <mmx/Node_get_exec_history_return.hxx>
#include <mmx/Node_get_genesis_hash.hxx>
#include <mmx/Node_get_genesis_hash_return.hxx>
#include <mmx/Node_get_header.hxx>
#include <mmx/Node_get_header_return.hxx>
#include <mmx/Node_get_header_at.hxx>
#include <mmx/Node_get_header_at_return.hxx>
#include <mmx/Node_get_height.hxx>
#include <mmx/Node_get_height_return.hxx>
#include <mmx/Node_get_history.hxx>
#include <mmx/Node_get_history_return.hxx>
#include <mmx/Node_get_network_info.hxx>
#include <mmx/Node_get_network_info_return.hxx>
#include <mmx/Node_get_offer.hxx>
#include <mmx/Node_get_offer_return.hxx>
#include <mmx/Node_get_offers.hxx>
#include <mmx/Node_get_offers_return.hxx>
#include <mmx/Node_get_offers_for.hxx>
#include <mmx/Node_get_offers_for_return.hxx>
#include <mmx/Node_get_params.hxx>
#include <mmx/Node_get_params_return.hxx>
#include <mmx/Node_get_synced_height.hxx>
#include <mmx/Node_get_synced_height_return.hxx>
#include <mmx/Node_get_total_balance.hxx>
#include <mmx/Node_get_total_balance_return.hxx>
#include <mmx/Node_get_total_balances.hxx>
#include <mmx/Node_get_total_balances_return.hxx>
#include <mmx/Node_get_total_supply.hxx>
#include <mmx/Node_get_total_supply_return.hxx>
#include <mmx/Node_get_trade_history.hxx>
#include <mmx/Node_get_trade_history_return.hxx>
#include <mmx/Node_get_trade_history_for.hxx>
#include <mmx/Node_get_trade_history_for_return.hxx>
#include <mmx/Node_get_transaction.hxx>
#include <mmx/Node_get_transaction_return.hxx>
#include <mmx/Node_get_transactions.hxx>
#include <mmx/Node_get_transactions_return.hxx>
#include <mmx/Node_get_tx_height.hxx>
#include <mmx/Node_get_tx_height_return.hxx>
#include <mmx/Node_get_tx_ids_at.hxx>
#include <mmx/Node_get_tx_ids_at_return.hxx>
#include <mmx/Node_get_tx_ids_since.hxx>
#include <mmx/Node_get_tx_ids_since_return.hxx>
#include <mmx/Node_get_tx_info.hxx>
#include <mmx/Node_get_tx_info_return.hxx>
#include <mmx/Node_get_tx_info_for.hxx>
#include <mmx/Node_get_tx_info_for_return.hxx>
#include <mmx/Node_get_virtual_plot_balance.hxx>
#include <mmx/Node_get_virtual_plot_balance_return.hxx>
#include <mmx/Node_get_virtual_plots_for.hxx>
#include <mmx/Node_get_virtual_plots_for_return.hxx>
#include <mmx/Node_read_storage.hxx>
#include <mmx/Node_read_storage_return.hxx>
#include <mmx/Node_read_storage_array.hxx>
#include <mmx/Node_read_storage_array_return.hxx>
#include <mmx/Node_read_storage_field.hxx>
#include <mmx/Node_read_storage_field_return.hxx>
#include <mmx/Node_read_storage_map.hxx>
#include <mmx/Node_read_storage_map_return.hxx>
#include <mmx/Node_read_storage_var.hxx>
#include <mmx/Node_read_storage_var_return.hxx>
#include <mmx/Node_start_sync.hxx>
#include <mmx/Node_start_sync_return.hxx>
#include <mmx/ProofOfTime.hxx>
#include <mmx/ProofResponse.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/address_info_t.hxx>
#include <mmx/balance_t.hxx>
#include <mmx/bls_pubkey_t.hpp>
#include <mmx/exec_entry_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/offer_data_t.hxx>
#include <mmx/trade_data_t.hxx>
#include <mmx/tx_entry_t.hxx>
#include <mmx/tx_info_t.hxx>
#include <mmx/uint128.hpp>
#include <mmx/vm/varptr_t.hpp>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/Variant.hpp>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpData.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace mmx {

NodeAsyncClient::NodeAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

NodeAsyncClient::NodeAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

uint64_t NodeAsyncClient::get_params(const std::function<void(std::shared_ptr<const ::mmx::ChainParams>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_params::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 0;
		vnx_queue_get_params[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_network_info(const std::function<void(std::shared_ptr<const ::mmx::NetworkInfo>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_network_info::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 1;
		vnx_queue_get_network_info[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_genesis_hash(const std::function<void(const ::mmx::hash_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_genesis_hash::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 2;
		vnx_queue_get_genesis_hash[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_height(const std::function<void(const uint32_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_height::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 3;
		vnx_queue_get_height[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_synced_height(const std::function<void(const vnx::optional<uint32_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_synced_height::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 4;
		vnx_queue_get_synced_height[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_block(const ::mmx::hash_t& hash, const std::function<void(std::shared_ptr<const ::mmx::Block>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_block::create();
	_method->hash = hash;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 5;
		vnx_queue_get_block[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_block_at(const uint32_t& height, const std::function<void(std::shared_ptr<const ::mmx::Block>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_block_at::create();
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 6;
		vnx_queue_get_block_at[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_header(const ::mmx::hash_t& hash, const std::function<void(std::shared_ptr<const ::mmx::BlockHeader>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_header::create();
	_method->hash = hash;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 7;
		vnx_queue_get_header[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_header_at(const uint32_t& height, const std::function<void(std::shared_ptr<const ::mmx::BlockHeader>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_header_at::create();
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 8;
		vnx_queue_get_header_at[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_block_hash(const uint32_t& height, const std::function<void(const vnx::optional<::mmx::hash_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_block_hash::create();
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 9;
		vnx_queue_get_block_hash[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_tx_height(const ::mmx::hash_t& id, const std::function<void(const vnx::optional<uint32_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_tx_height::create();
	_method->id = id;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 10;
		vnx_queue_get_tx_height[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_tx_info(const ::mmx::hash_t& id, const std::function<void(const vnx::optional<::mmx::tx_info_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_tx_info::create();
	_method->id = id;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 11;
		vnx_queue_get_tx_info[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_tx_info_for(std::shared_ptr<const ::mmx::Transaction> tx, const std::function<void(const vnx::optional<::mmx::tx_info_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_tx_info_for::create();
	_method->tx = tx;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 12;
		vnx_queue_get_tx_info_for[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_tx_ids_at(const uint32_t& height, const std::function<void(const std::vector<::mmx::hash_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_tx_ids_at::create();
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 13;
		vnx_queue_get_tx_ids_at[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_tx_ids_since(const uint32_t& height, const std::function<void(const std::vector<::mmx::hash_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_tx_ids_since::create();
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 14;
		vnx_queue_get_tx_ids_since[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::add_block(std::shared_ptr<const ::mmx::Block> block, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_add_block::create();
	_method->block = block;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 15;
		vnx_queue_add_block[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::add_transaction(std::shared_ptr<const ::mmx::Transaction> tx, const vnx::bool_t& pre_validate, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_add_transaction::create();
	_method->tx = tx;
	_method->pre_validate = pre_validate;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 16;
		vnx_queue_add_transaction[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_contract(const ::mmx::addr_t& address, const std::function<void(std::shared_ptr<const ::mmx::Contract>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_contract::create();
	_method->address = address;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 17;
		vnx_queue_get_contract[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_contract_for(const ::mmx::addr_t& address, const std::function<void(std::shared_ptr<const ::mmx::Contract>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_contract_for::create();
	_method->address = address;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 18;
		vnx_queue_get_contract_for[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_contract_at(const ::mmx::addr_t& address, const ::mmx::hash_t& block_hash, const std::function<void(std::shared_ptr<const ::mmx::Contract>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_contract_at::create();
	_method->address = address;
	_method->block_hash = block_hash;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 19;
		vnx_queue_get_contract_at[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_contracts(const std::vector<::mmx::addr_t>& addresses, const std::function<void(const std::vector<std::shared_ptr<const ::mmx::Contract>>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_contracts::create();
	_method->addresses = addresses;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 20;
		vnx_queue_get_contracts[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_contracts_by(const std::vector<::mmx::addr_t>& addresses, const std::function<void(const std::map<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_contracts_by::create();
	_method->addresses = addresses;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 21;
		vnx_queue_get_contracts_by[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_transaction(const ::mmx::hash_t& id, const vnx::bool_t& include_pending, const std::function<void(std::shared_ptr<const ::mmx::Transaction>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_transaction::create();
	_method->id = id;
	_method->include_pending = include_pending;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 22;
		vnx_queue_get_transaction[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_transactions(const std::vector<::mmx::hash_t>& ids, const std::function<void(const std::vector<std::shared_ptr<const ::mmx::Transaction>>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_transactions::create();
	_method->ids = ids;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 23;
		vnx_queue_get_transactions[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_history(const std::vector<::mmx::addr_t>& addresses, const int32_t& since, const std::function<void(const std::vector<::mmx::tx_entry_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_history::create();
	_method->addresses = addresses;
	_method->since = since;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 24;
		vnx_queue_get_history[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_balance(const ::mmx::addr_t& address, const ::mmx::addr_t& currency, const uint32_t& min_confirm, const std::function<void(const ::mmx::uint128&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_balance::create();
	_method->address = address;
	_method->currency = currency;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 25;
		vnx_queue_get_balance[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_balances(const ::mmx::addr_t& address, const uint32_t& min_confirm, const std::function<void(const std::map<::mmx::addr_t, ::mmx::uint128>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_balances::create();
	_method->address = address;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 26;
		vnx_queue_get_balances[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_contract_balances(const ::mmx::addr_t& address, const uint32_t& min_confirm, const std::function<void(const std::map<::mmx::addr_t, ::mmx::balance_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_contract_balances::create();
	_method->address = address;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 27;
		vnx_queue_get_contract_balances[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_total_balance(const std::vector<::mmx::addr_t>& addresses, const ::mmx::addr_t& currency, const uint32_t& min_confirm, const std::function<void(const ::mmx::uint128&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_total_balance::create();
	_method->addresses = addresses;
	_method->currency = currency;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 28;
		vnx_queue_get_total_balance[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_total_balances(const std::vector<::mmx::addr_t>& addresses, const uint32_t& min_confirm, const std::function<void(const std::map<::mmx::addr_t, ::mmx::uint128>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_total_balances::create();
	_method->addresses = addresses;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 29;
		vnx_queue_get_total_balances[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_all_balances(const std::vector<::mmx::addr_t>& addresses, const uint32_t& min_confirm, const std::function<void(const std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_all_balances::create();
	_method->addresses = addresses;
	_method->min_confirm = min_confirm;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 30;
		vnx_queue_get_all_balances[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_exec_history(const ::mmx::addr_t& address, const int32_t& since, const std::function<void(const std::vector<::mmx::exec_entry_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_exec_history::create();
	_method->address = address;
	_method->since = since;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 31;
		vnx_queue_get_exec_history[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::read_storage(const ::mmx::addr_t& contract, const uint32_t& height, const std::function<void(const std::map<std::string, ::mmx::vm::varptr_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_read_storage::create();
	_method->contract = contract;
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 32;
		vnx_queue_read_storage[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::dump_storage(const ::mmx::addr_t& contract, const uint32_t& height, const std::function<void(const std::map<uint64_t, ::mmx::vm::varptr_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_dump_storage::create();
	_method->contract = contract;
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 33;
		vnx_queue_dump_storage[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::read_storage_var(const ::mmx::addr_t& contract, const uint64_t& address, const uint32_t& height, const std::function<void(const ::mmx::vm::varptr_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_read_storage_var::create();
	_method->contract = contract;
	_method->address = address;
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 34;
		vnx_queue_read_storage_var[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::read_storage_field(const ::mmx::addr_t& contract, const std::string& name, const uint32_t& height, const std::function<void(const std::pair<::mmx::vm::varptr_t, uint64_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_read_storage_field::create();
	_method->contract = contract;
	_method->name = name;
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 35;
		vnx_queue_read_storage_field[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::read_storage_array(const ::mmx::addr_t& contract, const uint64_t& address, const uint32_t& height, const std::function<void(const std::vector<::mmx::vm::varptr_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_read_storage_array::create();
	_method->contract = contract;
	_method->address = address;
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 36;
		vnx_queue_read_storage_array[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::read_storage_map(const ::mmx::addr_t& contract, const uint64_t& address, const uint32_t& height, const std::function<void(const std::map<::mmx::vm::varptr_t, ::mmx::vm::varptr_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_read_storage_map::create();
	_method->contract = contract;
	_method->address = address;
	_method->height = height;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 37;
		vnx_queue_read_storage_map[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::call_contract(const ::mmx::addr_t& address, const std::string& method, const std::vector<::vnx::Variant>& args, const std::function<void(const ::vnx::Variant&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_call_contract::create();
	_method->address = address;
	_method->method = method;
	_method->args = args;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 38;
		vnx_queue_call_contract[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_address_info(const ::mmx::addr_t& address, const std::function<void(const ::mmx::address_info_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_address_info::create();
	_method->address = address;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 39;
		vnx_queue_get_address_info[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_virtual_plots_for(const ::mmx::bls_pubkey_t& farmer_key, const std::function<void(const std::vector<std::pair<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>>>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_virtual_plots_for::create();
	_method->farmer_key = farmer_key;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 40;
		vnx_queue_get_virtual_plots_for[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_virtual_plot_balance(const ::mmx::addr_t& plot_id, const vnx::optional<::mmx::hash_t>& block_hash, const std::function<void(const uint64_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_virtual_plot_balance::create();
	_method->plot_id = plot_id;
	_method->block_hash = block_hash;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 41;
		vnx_queue_get_virtual_plot_balance[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_offer(const ::mmx::addr_t& address, const std::function<void(const ::mmx::offer_data_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_offer::create();
	_method->address = address;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 42;
		vnx_queue_get_offer[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_offers(const uint32_t& since, const vnx::bool_t& is_open, const std::function<void(const std::vector<::mmx::offer_data_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_offers::create();
	_method->since = since;
	_method->is_open = is_open;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 43;
		vnx_queue_get_offers[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_offers_for(const vnx::optional<::mmx::addr_t>& bid, const vnx::optional<::mmx::addr_t>& ask, const uint32_t& since, const vnx::bool_t& is_open, const std::function<void(const std::vector<::mmx::offer_data_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_offers_for::create();
	_method->bid = bid;
	_method->ask = ask;
	_method->since = since;
	_method->is_open = is_open;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 44;
		vnx_queue_get_offers_for[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_trade_history(const int32_t& since, const std::function<void(const std::vector<::mmx::trade_data_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_trade_history::create();
	_method->since = since;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 45;
		vnx_queue_get_trade_history[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_trade_history_for(const vnx::optional<::mmx::addr_t>& bid, const vnx::optional<::mmx::addr_t>& ask, const int32_t& since, const std::function<void(const std::vector<::mmx::trade_data_t>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_trade_history_for::create();
	_method->bid = bid;
	_method->ask = ask;
	_method->since = since;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 46;
		vnx_queue_get_trade_history_for[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::get_total_supply(const ::mmx::addr_t& currency, const std::function<void(const ::mmx::uint128&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_get_total_supply::create();
	_method->currency = currency;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 47;
		vnx_queue_get_total_supply[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::start_sync(const vnx::bool_t& force, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::mmx::Node_start_sync::create();
	_method->force = force;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 48;
		vnx_queue_start_sync[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::http_request(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const std::function<void(std::shared_ptr<const ::vnx::addons::HttpResponse>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::addons::HttpComponent_http_request::create();
	_method->request = request;
	_method->sub_path = sub_path;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 49;
		vnx_queue_http_request[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::http_request_chunk(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const int64_t& offset, const int64_t& max_bytes, const std::function<void(std::shared_ptr<const ::vnx::addons::HttpData>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::addons::HttpComponent_http_request_chunk::create();
	_method->request = request;
	_method->sub_path = sub_path;
	_method->offset = offset;
	_method->max_bytes = max_bytes;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 50;
		vnx_queue_http_request_chunk[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_get_config_object(const std::function<void(const ::vnx::Object&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config_object::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 51;
		vnx_queue_vnx_get_config_object[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_get_config(const std::string& name, const std::function<void(const ::vnx::Variant&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config::create();
	_method->name = name;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 52;
		vnx_queue_vnx_get_config[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_set_config_object(const ::vnx::Object& config, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 53;
		vnx_queue_vnx_set_config_object[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_set_config(const std::string& name, const ::vnx::Variant& value, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 54;
		vnx_queue_vnx_set_config[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_get_type_code(const std::function<void(const ::vnx::TypeCode&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 55;
		vnx_queue_vnx_get_type_code[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_get_module_info(const std::function<void(std::shared_ptr<const ::vnx::ModuleInfo>)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_get_module_info::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 56;
		vnx_queue_vnx_get_module_info[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_restart(const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 57;
		vnx_queue_vnx_restart[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_stop(const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 58;
		vnx_queue_vnx_stop[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t NodeAsyncClient::vnx_self_test(const std::function<void(const vnx::bool_t&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::vnx::ModuleInterface_vnx_self_test::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 59;
		vnx_queue_vnx_self_test[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

int32_t NodeAsyncClient::vnx_purge_request(uint64_t _request_id, const vnx::exception& _ex) {
	std::unique_lock<std::mutex> _lock(vnx_mutex);
	const auto _iter = vnx_pending.find(_request_id);
	if(_iter == vnx_pending.end()) {
		return -1;
	}
	const auto _index = _iter->second;
	vnx_pending.erase(_iter);
	switch(_index) {
		case 0: {
			const auto _iter = vnx_queue_get_params.find(_request_id);
			if(_iter != vnx_queue_get_params.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_params.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 1: {
			const auto _iter = vnx_queue_get_network_info.find(_request_id);
			if(_iter != vnx_queue_get_network_info.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_network_info.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 2: {
			const auto _iter = vnx_queue_get_genesis_hash.find(_request_id);
			if(_iter != vnx_queue_get_genesis_hash.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_genesis_hash.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 3: {
			const auto _iter = vnx_queue_get_height.find(_request_id);
			if(_iter != vnx_queue_get_height.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_height.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 4: {
			const auto _iter = vnx_queue_get_synced_height.find(_request_id);
			if(_iter != vnx_queue_get_synced_height.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_synced_height.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 5: {
			const auto _iter = vnx_queue_get_block.find(_request_id);
			if(_iter != vnx_queue_get_block.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_block.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 6: {
			const auto _iter = vnx_queue_get_block_at.find(_request_id);
			if(_iter != vnx_queue_get_block_at.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_block_at.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 7: {
			const auto _iter = vnx_queue_get_header.find(_request_id);
			if(_iter != vnx_queue_get_header.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_header.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 8: {
			const auto _iter = vnx_queue_get_header_at.find(_request_id);
			if(_iter != vnx_queue_get_header_at.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_header_at.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 9: {
			const auto _iter = vnx_queue_get_block_hash.find(_request_id);
			if(_iter != vnx_queue_get_block_hash.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_block_hash.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 10: {
			const auto _iter = vnx_queue_get_tx_height.find(_request_id);
			if(_iter != vnx_queue_get_tx_height.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_tx_height.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 11: {
			const auto _iter = vnx_queue_get_tx_info.find(_request_id);
			if(_iter != vnx_queue_get_tx_info.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_tx_info.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 12: {
			const auto _iter = vnx_queue_get_tx_info_for.find(_request_id);
			if(_iter != vnx_queue_get_tx_info_for.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_tx_info_for.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 13: {
			const auto _iter = vnx_queue_get_tx_ids_at.find(_request_id);
			if(_iter != vnx_queue_get_tx_ids_at.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_tx_ids_at.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 14: {
			const auto _iter = vnx_queue_get_tx_ids_since.find(_request_id);
			if(_iter != vnx_queue_get_tx_ids_since.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_tx_ids_since.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 15: {
			const auto _iter = vnx_queue_add_block.find(_request_id);
			if(_iter != vnx_queue_add_block.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_add_block.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 16: {
			const auto _iter = vnx_queue_add_transaction.find(_request_id);
			if(_iter != vnx_queue_add_transaction.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_add_transaction.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 17: {
			const auto _iter = vnx_queue_get_contract.find(_request_id);
			if(_iter != vnx_queue_get_contract.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contract.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 18: {
			const auto _iter = vnx_queue_get_contract_for.find(_request_id);
			if(_iter != vnx_queue_get_contract_for.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contract_for.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 19: {
			const auto _iter = vnx_queue_get_contract_at.find(_request_id);
			if(_iter != vnx_queue_get_contract_at.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contract_at.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 20: {
			const auto _iter = vnx_queue_get_contracts.find(_request_id);
			if(_iter != vnx_queue_get_contracts.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contracts.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 21: {
			const auto _iter = vnx_queue_get_contracts_by.find(_request_id);
			if(_iter != vnx_queue_get_contracts_by.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contracts_by.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 22: {
			const auto _iter = vnx_queue_get_transaction.find(_request_id);
			if(_iter != vnx_queue_get_transaction.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_transaction.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 23: {
			const auto _iter = vnx_queue_get_transactions.find(_request_id);
			if(_iter != vnx_queue_get_transactions.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_transactions.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 24: {
			const auto _iter = vnx_queue_get_history.find(_request_id);
			if(_iter != vnx_queue_get_history.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_history.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 25: {
			const auto _iter = vnx_queue_get_balance.find(_request_id);
			if(_iter != vnx_queue_get_balance.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_balance.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 26: {
			const auto _iter = vnx_queue_get_balances.find(_request_id);
			if(_iter != vnx_queue_get_balances.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_balances.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 27: {
			const auto _iter = vnx_queue_get_contract_balances.find(_request_id);
			if(_iter != vnx_queue_get_contract_balances.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_contract_balances.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 28: {
			const auto _iter = vnx_queue_get_total_balance.find(_request_id);
			if(_iter != vnx_queue_get_total_balance.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_total_balance.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 29: {
			const auto _iter = vnx_queue_get_total_balances.find(_request_id);
			if(_iter != vnx_queue_get_total_balances.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_total_balances.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 30: {
			const auto _iter = vnx_queue_get_all_balances.find(_request_id);
			if(_iter != vnx_queue_get_all_balances.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_all_balances.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 31: {
			const auto _iter = vnx_queue_get_exec_history.find(_request_id);
			if(_iter != vnx_queue_get_exec_history.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_exec_history.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 32: {
			const auto _iter = vnx_queue_read_storage.find(_request_id);
			if(_iter != vnx_queue_read_storage.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_read_storage.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 33: {
			const auto _iter = vnx_queue_dump_storage.find(_request_id);
			if(_iter != vnx_queue_dump_storage.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_dump_storage.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 34: {
			const auto _iter = vnx_queue_read_storage_var.find(_request_id);
			if(_iter != vnx_queue_read_storage_var.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_read_storage_var.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 35: {
			const auto _iter = vnx_queue_read_storage_field.find(_request_id);
			if(_iter != vnx_queue_read_storage_field.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_read_storage_field.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 36: {
			const auto _iter = vnx_queue_read_storage_array.find(_request_id);
			if(_iter != vnx_queue_read_storage_array.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_read_storage_array.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 37: {
			const auto _iter = vnx_queue_read_storage_map.find(_request_id);
			if(_iter != vnx_queue_read_storage_map.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_read_storage_map.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 38: {
			const auto _iter = vnx_queue_call_contract.find(_request_id);
			if(_iter != vnx_queue_call_contract.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_call_contract.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 39: {
			const auto _iter = vnx_queue_get_address_info.find(_request_id);
			if(_iter != vnx_queue_get_address_info.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_address_info.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 40: {
			const auto _iter = vnx_queue_get_virtual_plots_for.find(_request_id);
			if(_iter != vnx_queue_get_virtual_plots_for.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_virtual_plots_for.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 41: {
			const auto _iter = vnx_queue_get_virtual_plot_balance.find(_request_id);
			if(_iter != vnx_queue_get_virtual_plot_balance.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_virtual_plot_balance.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 42: {
			const auto _iter = vnx_queue_get_offer.find(_request_id);
			if(_iter != vnx_queue_get_offer.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_offer.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 43: {
			const auto _iter = vnx_queue_get_offers.find(_request_id);
			if(_iter != vnx_queue_get_offers.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_offers.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 44: {
			const auto _iter = vnx_queue_get_offers_for.find(_request_id);
			if(_iter != vnx_queue_get_offers_for.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_offers_for.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 45: {
			const auto _iter = vnx_queue_get_trade_history.find(_request_id);
			if(_iter != vnx_queue_get_trade_history.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_trade_history.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 46: {
			const auto _iter = vnx_queue_get_trade_history_for.find(_request_id);
			if(_iter != vnx_queue_get_trade_history_for.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_trade_history_for.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 47: {
			const auto _iter = vnx_queue_get_total_supply.find(_request_id);
			if(_iter != vnx_queue_get_total_supply.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_total_supply.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 48: {
			const auto _iter = vnx_queue_start_sync.find(_request_id);
			if(_iter != vnx_queue_start_sync.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_start_sync.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 49: {
			const auto _iter = vnx_queue_http_request.find(_request_id);
			if(_iter != vnx_queue_http_request.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_http_request.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 50: {
			const auto _iter = vnx_queue_http_request_chunk.find(_request_id);
			if(_iter != vnx_queue_http_request_chunk.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_http_request_chunk.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 51: {
			const auto _iter = vnx_queue_vnx_get_config_object.find(_request_id);
			if(_iter != vnx_queue_vnx_get_config_object.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_config_object.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 52: {
			const auto _iter = vnx_queue_vnx_get_config.find(_request_id);
			if(_iter != vnx_queue_vnx_get_config.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_config.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 53: {
			const auto _iter = vnx_queue_vnx_set_config_object.find(_request_id);
			if(_iter != vnx_queue_vnx_set_config_object.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_set_config_object.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 54: {
			const auto _iter = vnx_queue_vnx_set_config.find(_request_id);
			if(_iter != vnx_queue_vnx_set_config.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_set_config.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 55: {
			const auto _iter = vnx_queue_vnx_get_type_code.find(_request_id);
			if(_iter != vnx_queue_vnx_get_type_code.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_type_code.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 56: {
			const auto _iter = vnx_queue_vnx_get_module_info.find(_request_id);
			if(_iter != vnx_queue_vnx_get_module_info.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_get_module_info.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 57: {
			const auto _iter = vnx_queue_vnx_restart.find(_request_id);
			if(_iter != vnx_queue_vnx_restart.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_restart.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 58: {
			const auto _iter = vnx_queue_vnx_stop.find(_request_id);
			if(_iter != vnx_queue_vnx_stop.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_stop.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 59: {
			const auto _iter = vnx_queue_vnx_self_test.find(_request_id);
			if(_iter != vnx_queue_vnx_self_test.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_vnx_self_test.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
	}
	return _index;
}

int32_t NodeAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) {
	std::unique_lock<std::mutex> _lock(vnx_mutex);
	const auto _iter = vnx_pending.find(_request_id);
	if(_iter == vnx_pending.end()) {
		throw std::runtime_error("NodeAsyncClient: received unknown return");
	}
	const auto _index = _iter->second;
	vnx_pending.erase(_iter);
	switch(_index) {
		case 0: {
			const auto _iter = vnx_queue_get_params.find(_request_id);
			if(_iter == vnx_queue_get_params.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_params.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_params_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::ChainParams>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 1: {
			const auto _iter = vnx_queue_get_network_info.find(_request_id);
			if(_iter == vnx_queue_get_network_info.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_network_info.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_network_info_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::NetworkInfo>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 2: {
			const auto _iter = vnx_queue_get_genesis_hash.find(_request_id);
			if(_iter == vnx_queue_get_genesis_hash.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_genesis_hash.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_genesis_hash_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::hash_t>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 3: {
			const auto _iter = vnx_queue_get_height.find(_request_id);
			if(_iter == vnx_queue_get_height.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_height.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_height_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<uint32_t>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 4: {
			const auto _iter = vnx_queue_get_synced_height.find(_request_id);
			if(_iter == vnx_queue_get_synced_height.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_synced_height.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_synced_height_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::optional<uint32_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 5: {
			const auto _iter = vnx_queue_get_block.find(_request_id);
			if(_iter == vnx_queue_get_block.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_block.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_block_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Block>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 6: {
			const auto _iter = vnx_queue_get_block_at.find(_request_id);
			if(_iter == vnx_queue_get_block_at.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_block_at.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_block_at_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Block>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 7: {
			const auto _iter = vnx_queue_get_header.find(_request_id);
			if(_iter == vnx_queue_get_header.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_header.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_header_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::BlockHeader>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 8: {
			const auto _iter = vnx_queue_get_header_at.find(_request_id);
			if(_iter == vnx_queue_get_header_at.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_header_at.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_header_at_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::BlockHeader>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 9: {
			const auto _iter = vnx_queue_get_block_hash.find(_request_id);
			if(_iter == vnx_queue_get_block_hash.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_block_hash.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_block_hash_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::optional<::mmx::hash_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 10: {
			const auto _iter = vnx_queue_get_tx_height.find(_request_id);
			if(_iter == vnx_queue_get_tx_height.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_tx_height.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_height_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::optional<uint32_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 11: {
			const auto _iter = vnx_queue_get_tx_info.find(_request_id);
			if(_iter == vnx_queue_get_tx_info.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_tx_info.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_info_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::optional<::mmx::tx_info_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 12: {
			const auto _iter = vnx_queue_get_tx_info_for.find(_request_id);
			if(_iter == vnx_queue_get_tx_info_for.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_tx_info_for.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_info_for_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::optional<::mmx::tx_info_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 13: {
			const auto _iter = vnx_queue_get_tx_ids_at.find(_request_id);
			if(_iter == vnx_queue_get_tx_ids_at.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_tx_ids_at.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_ids_at_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::hash_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 14: {
			const auto _iter = vnx_queue_get_tx_ids_since.find(_request_id);
			if(_iter == vnx_queue_get_tx_ids_since.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_tx_ids_since.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_ids_since_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::hash_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 15: {
			const auto _iter = vnx_queue_add_block.find(_request_id);
			if(_iter == vnx_queue_add_block.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_add_block.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 16: {
			const auto _iter = vnx_queue_add_transaction.find(_request_id);
			if(_iter == vnx_queue_add_transaction.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_add_transaction.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 17: {
			const auto _iter = vnx_queue_get_contract.find(_request_id);
			if(_iter == vnx_queue_get_contract.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contract.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contract_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Contract>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 18: {
			const auto _iter = vnx_queue_get_contract_for.find(_request_id);
			if(_iter == vnx_queue_get_contract_for.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contract_for.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contract_for_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Contract>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 19: {
			const auto _iter = vnx_queue_get_contract_at.find(_request_id);
			if(_iter == vnx_queue_get_contract_at.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contract_at.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contract_at_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Contract>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 20: {
			const auto _iter = vnx_queue_get_contracts.find(_request_id);
			if(_iter == vnx_queue_get_contracts.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contracts.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contracts_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::Contract>>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 21: {
			const auto _iter = vnx_queue_get_contracts_by.find(_request_id);
			if(_iter == vnx_queue_get_contracts_by.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contracts_by.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contracts_by_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 22: {
			const auto _iter = vnx_queue_get_transaction.find(_request_id);
			if(_iter == vnx_queue_get_transaction.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_transaction.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_transaction_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 23: {
			const auto _iter = vnx_queue_get_transactions.find(_request_id);
			if(_iter == vnx_queue_get_transactions.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_transactions.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_transactions_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::Transaction>>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 24: {
			const auto _iter = vnx_queue_get_history.find(_request_id);
			if(_iter == vnx_queue_get_history.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_history.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_history_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::tx_entry_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 25: {
			const auto _iter = vnx_queue_get_balance.find(_request_id);
			if(_iter == vnx_queue_get_balance.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_balance.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_balance_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::uint128>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 26: {
			const auto _iter = vnx_queue_get_balances.find(_request_id);
			if(_iter == vnx_queue_get_balances.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_balances.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_balances_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::uint128>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 27: {
			const auto _iter = vnx_queue_get_contract_balances.find(_request_id);
			if(_iter == vnx_queue_get_contract_balances.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_contract_balances.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contract_balances_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 28: {
			const auto _iter = vnx_queue_get_total_balance.find(_request_id);
			if(_iter == vnx_queue_get_total_balance.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_total_balance.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_total_balance_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::uint128>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 29: {
			const auto _iter = vnx_queue_get_total_balances.find(_request_id);
			if(_iter == vnx_queue_get_total_balances.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_total_balances.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_total_balances_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::uint128>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 30: {
			const auto _iter = vnx_queue_get_all_balances.find(_request_id);
			if(_iter == vnx_queue_get_all_balances.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_all_balances.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_all_balances_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 31: {
			const auto _iter = vnx_queue_get_exec_history.find(_request_id);
			if(_iter == vnx_queue_get_exec_history.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_exec_history.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_exec_history_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::exec_entry_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 32: {
			const auto _iter = vnx_queue_read_storage.find(_request_id);
			if(_iter == vnx_queue_read_storage.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_read_storage.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<std::string, ::mmx::vm::varptr_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 33: {
			const auto _iter = vnx_queue_dump_storage.find(_request_id);
			if(_iter == vnx_queue_dump_storage.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_dump_storage.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_dump_storage_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<uint64_t, ::mmx::vm::varptr_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 34: {
			const auto _iter = vnx_queue_read_storage_var.find(_request_id);
			if(_iter == vnx_queue_read_storage_var.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_read_storage_var.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_var_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::vm::varptr_t>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 35: {
			const auto _iter = vnx_queue_read_storage_field.find(_request_id);
			if(_iter == vnx_queue_read_storage_field.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_read_storage_field.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_field_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::pair<::mmx::vm::varptr_t, uint64_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 36: {
			const auto _iter = vnx_queue_read_storage_array.find(_request_id);
			if(_iter == vnx_queue_read_storage_array.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_read_storage_array.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_array_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::vm::varptr_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 37: {
			const auto _iter = vnx_queue_read_storage_map.find(_request_id);
			if(_iter == vnx_queue_read_storage_map.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_read_storage_map.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_map_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::map<::mmx::vm::varptr_t, ::mmx::vm::varptr_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 38: {
			const auto _iter = vnx_queue_call_contract.find(_request_id);
			if(_iter == vnx_queue_call_contract.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_call_contract.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_call_contract_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::vnx::Variant>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 39: {
			const auto _iter = vnx_queue_get_address_info.find(_request_id);
			if(_iter == vnx_queue_get_address_info.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_address_info.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_address_info_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::address_info_t>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 40: {
			const auto _iter = vnx_queue_get_virtual_plots_for.find(_request_id);
			if(_iter == vnx_queue_get_virtual_plots_for.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_virtual_plots_for.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_virtual_plots_for_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<std::pair<::mmx::addr_t, std::shared_ptr<const ::mmx::Contract>>>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 41: {
			const auto _iter = vnx_queue_get_virtual_plot_balance.find(_request_id);
			if(_iter == vnx_queue_get_virtual_plot_balance.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_virtual_plot_balance.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_virtual_plot_balance_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<uint64_t>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 42: {
			const auto _iter = vnx_queue_get_offer.find(_request_id);
			if(_iter == vnx_queue_get_offer.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_offer.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_offer_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::offer_data_t>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 43: {
			const auto _iter = vnx_queue_get_offers.find(_request_id);
			if(_iter == vnx_queue_get_offers.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_offers.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_offers_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::offer_data_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 44: {
			const auto _iter = vnx_queue_get_offers_for.find(_request_id);
			if(_iter == vnx_queue_get_offers_for.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_offers_for.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_offers_for_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::offer_data_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 45: {
			const auto _iter = vnx_queue_get_trade_history.find(_request_id);
			if(_iter == vnx_queue_get_trade_history.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_trade_history.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_trade_history_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::trade_data_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 46: {
			const auto _iter = vnx_queue_get_trade_history_for.find(_request_id);
			if(_iter == vnx_queue_get_trade_history_for.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_trade_history_for.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_trade_history_for_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<::mmx::trade_data_t>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 47: {
			const auto _iter = vnx_queue_get_total_supply.find(_request_id);
			if(_iter == vnx_queue_get_total_supply.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_total_supply.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_total_supply_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::mmx::uint128>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 48: {
			const auto _iter = vnx_queue_start_sync.find(_request_id);
			if(_iter == vnx_queue_start_sync.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_start_sync.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 49: {
			const auto _iter = vnx_queue_http_request.find(_request_id);
			if(_iter == vnx_queue_http_request.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_http_request.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpResponse>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 50: {
			const auto _iter = vnx_queue_http_request_chunk.find(_request_id);
			if(_iter == vnx_queue_http_request_chunk.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_http_request_chunk.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_chunk_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpData>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 51: {
			const auto _iter = vnx_queue_vnx_get_config_object.find(_request_id);
			if(_iter == vnx_queue_vnx_get_config_object.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_config_object.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::vnx::Object>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 52: {
			const auto _iter = vnx_queue_vnx_get_config.find(_request_id);
			if(_iter == vnx_queue_vnx_get_config.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_config.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::vnx::Variant>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 53: {
			const auto _iter = vnx_queue_vnx_set_config_object.find(_request_id);
			if(_iter == vnx_queue_vnx_set_config_object.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_set_config_object.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 54: {
			const auto _iter = vnx_queue_vnx_set_config.find(_request_id);
			if(_iter == vnx_queue_vnx_set_config.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_set_config.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 55: {
			const auto _iter = vnx_queue_vnx_get_type_code.find(_request_id);
			if(_iter == vnx_queue_vnx_get_type_code.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_type_code.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<::vnx::TypeCode>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 56: {
			const auto _iter = vnx_queue_vnx_get_module_info.find(_request_id);
			if(_iter == vnx_queue_vnx_get_module_info.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_get_module_info.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::ModuleInfo>>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		case 57: {
			const auto _iter = vnx_queue_vnx_restart.find(_request_id);
			if(_iter == vnx_queue_vnx_restart.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_restart.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 58: {
			const auto _iter = vnx_queue_vnx_stop.find(_request_id);
			if(_iter == vnx_queue_vnx_stop.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_stop.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 59: {
			const auto _iter = vnx_queue_vnx_self_test.find(_request_id);
			if(_iter == vnx_queue_vnx_self_test.end()) {
				throw std::runtime_error("NodeAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_vnx_self_test.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<vnx::bool_t>());
				} else {
					throw std::logic_error("NodeAsyncClient: invalid return value");
				}
			}
			break;
		}
		default:
			if(_index >= 0) {
				throw std::logic_error("NodeAsyncClient: invalid callback index");
			}
	}
	return _index;
}


} // namespace mmx
