
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_TableIndex_HXX_
#define INCLUDE_mmx_TableIndex_HXX_

#include <mmx/package.hxx>
#include <vnx/Value.h>


namespace mmx {

class MMX_EXPORT TableIndex : public ::vnx::Value {
public:
	
	uint32_t version = 0;
	uint64_t next_block_id = 0;
	std::vector<std::string> blocks;
	std::vector<std::string> deleted;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xbbb2e8ceb4359eddull;
	
	TableIndex() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	static std::shared_ptr<TableIndex> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const TableIndex& _value);
	friend std::istream& operator>>(std::istream& _in, TableIndex& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method) override;
	
};

template<typename T>
void TableIndex::accept_generic(T& _visitor) const {
	_visitor.template type_begin<TableIndex>(4);
	_visitor.type_field("version", 0); _visitor.accept(version);
	_visitor.type_field("next_block_id", 1); _visitor.accept(next_block_id);
	_visitor.type_field("blocks", 2); _visitor.accept(blocks);
	_visitor.type_field("deleted", 3); _visitor.accept(deleted);
	_visitor.template type_end<TableIndex>(4);
}


} // namespace mmx


namespace vnx {

} // vnx

#endif // INCLUDE_mmx_TableIndex_HXX_
