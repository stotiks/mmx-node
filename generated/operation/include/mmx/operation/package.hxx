
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_operation_PACKAGE_HXX_
#define INCLUDE_mmx_operation_PACKAGE_HXX_

#include <vnx/Type.h>

#include <mmx/package.hxx>
#include <vnx/package.hxx>

#ifdef MMX_OPERATION_EXPORT_ENABLE
#include <mmx_operation_export.h>
#else
#ifndef MMX_OPERATION_EXPORT
#define MMX_OPERATION_EXPORT
#endif
#endif


namespace mmx {
namespace operation {


class Deposit;
class Deposit_calc_hash;
class Deposit_calc_hash_return;
class Deposit_is_valid;
class Deposit_is_valid_return;
class Execute;
class Execute_calc_cost;
class Execute_calc_cost_return;
class Execute_calc_hash;
class Execute_calc_hash_return;
class Execute_is_valid;
class Execute_is_valid_return;
class Mint;
class Mint_calc_hash;
class Mint_calc_hash_return;
class Mint_is_valid;
class Mint_is_valid_return;
class Mutate;
class Mutate_calc_cost;
class Mutate_calc_cost_return;
class Mutate_calc_hash;
class Mutate_calc_hash_return;
class Revoke;
class Revoke_calc_hash;
class Revoke_calc_hash_return;
class Spend;
class Spend_calc_hash;
class Spend_calc_hash_return;
class Vote;
class Vote_calc_hash;
class Vote_calc_hash_return;
class Vote_is_valid;
class Vote_is_valid_return;

MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Deposit; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Deposit_calc_hash; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Deposit_calc_hash_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Deposit_is_valid; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Deposit_is_valid_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute_calc_cost; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute_calc_cost_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute_calc_hash; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute_calc_hash_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute_is_valid; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute_is_valid_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mint; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mint_calc_hash; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mint_calc_hash_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mint_is_valid; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mint_is_valid_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mutate; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mutate_calc_cost; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mutate_calc_cost_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mutate_calc_hash; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Mutate_calc_hash_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Revoke; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Revoke_calc_hash; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Revoke_calc_hash_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Spend; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Spend_calc_hash; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Spend_calc_hash_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Vote; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Vote_calc_hash; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Vote_calc_hash_return; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Vote_is_valid; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Vote_is_valid_return; ///< \private

} // namespace mmx
} // namespace operation


namespace vnx {

void read(TypeInput& in, ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Deposit_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Deposit_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Deposit_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Deposit_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mint_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mint_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mint_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mint_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mutate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mutate_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mutate_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mutate_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Mutate_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Revoke& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Revoke_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Revoke_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Spend& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Spend_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Spend_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Vote& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Vote_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Vote_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Vote_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Vote_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Deposit_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Deposit_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Deposit_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Deposit_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mint_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mint_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mint_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mint_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mutate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Revoke& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Revoke_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Revoke_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Spend& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Spend_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Spend_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Vote& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Vote_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Vote_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Vote_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Vote_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::mmx::operation::Deposit& value); ///< \private
void read(std::istream& in, ::mmx::operation::Deposit_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::operation::Deposit_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Deposit_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::operation::Deposit_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mint& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mint_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mint_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mint_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mint_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mutate& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mutate_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mutate_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mutate_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::operation::Mutate_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Revoke& value); ///< \private
void read(std::istream& in, ::mmx::operation::Revoke_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::operation::Revoke_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Spend& value); ///< \private
void read(std::istream& in, ::mmx::operation::Spend_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::operation::Spend_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Vote& value); ///< \private
void read(std::istream& in, ::mmx::operation::Vote_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::operation::Vote_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::operation::Vote_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::operation::Vote_is_valid_return& value); ///< \private

void write(std::ostream& out, const ::mmx::operation::Deposit& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Deposit_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Deposit_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Deposit_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Deposit_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mint& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mint_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mint_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mint_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mint_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mutate& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mutate_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mutate_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mutate_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Mutate_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Revoke& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Revoke_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Revoke_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Spend& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Spend_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Spend_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Vote& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Vote_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Vote_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Vote_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Vote_is_valid_return& value); ///< \private

void accept(Visitor& visitor, const ::mmx::operation::Deposit& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Deposit_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Deposit_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Deposit_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Deposit_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mint& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mint_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mint_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mint_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mint_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mutate& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Revoke& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Revoke_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Revoke_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Spend& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Spend_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Spend_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Vote& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Vote_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Vote_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Vote_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Vote_is_valid_return& value); ///< \private

/// \private
template<>
struct type<::mmx::operation::Deposit> {
	void read(TypeInput& in, ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Deposit& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Deposit& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Deposit& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Deposit& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Deposit_calc_hash> {
	void read(TypeInput& in, ::mmx::operation::Deposit_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Deposit_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Deposit_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Deposit_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Deposit_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Deposit_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Deposit_calc_hash_return> {
	void read(TypeInput& in, ::mmx::operation::Deposit_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Deposit_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Deposit_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Deposit_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Deposit_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Deposit_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Deposit_is_valid> {
	void read(TypeInput& in, ::mmx::operation::Deposit_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Deposit_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Deposit_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Deposit_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Deposit_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Deposit_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Deposit_is_valid_return> {
	void read(TypeInput& in, ::mmx::operation::Deposit_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Deposit_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Deposit_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Deposit_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Deposit_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Deposit_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute> {
	void read(TypeInput& in, ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute_calc_cost> {
	void read(TypeInput& in, ::mmx::operation::Execute_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute_calc_cost_return> {
	void read(TypeInput& in, ::mmx::operation::Execute_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute_calc_hash> {
	void read(TypeInput& in, ::mmx::operation::Execute_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute_calc_hash_return> {
	void read(TypeInput& in, ::mmx::operation::Execute_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute_is_valid> {
	void read(TypeInput& in, ::mmx::operation::Execute_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute_is_valid_return> {
	void read(TypeInput& in, ::mmx::operation::Execute_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mint> {
	void read(TypeInput& in, ::mmx::operation::Mint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mint& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mint& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mint& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mint& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mint_calc_hash> {
	void read(TypeInput& in, ::mmx::operation::Mint_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mint_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mint_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mint_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mint_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mint_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mint_calc_hash_return> {
	void read(TypeInput& in, ::mmx::operation::Mint_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mint_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mint_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mint_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mint_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mint_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mint_is_valid> {
	void read(TypeInput& in, ::mmx::operation::Mint_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mint_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mint_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mint_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mint_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mint_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mint_is_valid_return> {
	void read(TypeInput& in, ::mmx::operation::Mint_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mint_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mint_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mint_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mint_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mint_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mutate> {
	void read(TypeInput& in, ::mmx::operation::Mutate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mutate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mutate& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mutate& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mutate& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mutate& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mutate_calc_cost> {
	void read(TypeInput& in, ::mmx::operation::Mutate_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mutate_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mutate_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mutate_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mutate_calc_cost_return> {
	void read(TypeInput& in, ::mmx::operation::Mutate_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mutate_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mutate_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mutate_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mutate_calc_hash> {
	void read(TypeInput& in, ::mmx::operation::Mutate_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mutate_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mutate_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mutate_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Mutate_calc_hash_return> {
	void read(TypeInput& in, ::mmx::operation::Mutate_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Mutate_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Mutate_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Mutate_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Mutate_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Mutate_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Revoke> {
	void read(TypeInput& in, ::mmx::operation::Revoke& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Revoke& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Revoke& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Revoke& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Revoke& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Revoke& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Revoke_calc_hash> {
	void read(TypeInput& in, ::mmx::operation::Revoke_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Revoke_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Revoke_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Revoke_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Revoke_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Revoke_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Revoke_calc_hash_return> {
	void read(TypeInput& in, ::mmx::operation::Revoke_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Revoke_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Revoke_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Revoke_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Revoke_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Revoke_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Spend> {
	void read(TypeInput& in, ::mmx::operation::Spend& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Spend& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Spend& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Spend& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Spend& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Spend& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Spend_calc_hash> {
	void read(TypeInput& in, ::mmx::operation::Spend_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Spend_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Spend_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Spend_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Spend_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Spend_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Spend_calc_hash_return> {
	void read(TypeInput& in, ::mmx::operation::Spend_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Spend_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Spend_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Spend_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Spend_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Spend_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Vote> {
	void read(TypeInput& in, ::mmx::operation::Vote& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Vote& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Vote& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Vote& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Vote& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Vote& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Vote_calc_hash> {
	void read(TypeInput& in, ::mmx::operation::Vote_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Vote_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Vote_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Vote_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Vote_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Vote_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Vote_calc_hash_return> {
	void read(TypeInput& in, ::mmx::operation::Vote_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Vote_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Vote_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Vote_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Vote_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Vote_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Vote_is_valid> {
	void read(TypeInput& in, ::mmx::operation::Vote_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Vote_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Vote_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Vote_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Vote_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Vote_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Vote_is_valid_return> {
	void read(TypeInput& in, ::mmx::operation::Vote_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Vote_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Vote_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Vote_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Vote_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Vote_is_valid_return& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_mmx_operation_PACKAGE_HXX_
