
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_operation_Mutate_HXX_
#define INCLUDE_mmx_operation_Mutate_HXX_

#include <mmx/operation/package.hxx>
#include <mmx/ChainParams.hxx>
#include <mmx/Operation.hxx>
#include <mmx/hash_t.hpp>
#include <vnx/Object.hpp>


namespace mmx {
namespace operation {

class MMX_OPERATION_EXPORT Mutate : public ::mmx::Operation {
public:
	
	::vnx::Object method;
	
	typedef ::mmx::Operation Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x174cf0ec53db63efull;
	
	Mutate() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual ::mmx::hash_t calc_hash(const vnx::bool_t& full_hash = 0) const override;
	virtual uint64_t calc_cost(std::shared_ptr<const ::mmx::ChainParams> params = nullptr) const override;
	
	static std::shared_ptr<Mutate> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const Mutate& _value);
	friend std::istream& operator>>(std::istream& _in, Mutate& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method) override;
	
};

template<typename T>
void Mutate::accept_generic(T& _visitor) const {
	_visitor.template type_begin<Mutate>(4);
	_visitor.type_field("version", 0); _visitor.accept(version);
	_visitor.type_field("address", 1); _visitor.accept(address);
	_visitor.type_field("solution", 2); _visitor.accept(solution);
	_visitor.type_field("method", 3); _visitor.accept(method);
	_visitor.template type_end<Mutate>(4);
}


} // namespace mmx
} // namespace operation


namespace vnx {

} // vnx

#endif // INCLUDE_mmx_operation_Mutate_HXX_
