package mmx;

class Transaction extends TransactionBase {
	
	uint version;
	
	uint expires = -1;					// height
	
	uint fee_ratio = 1024;				// 1024 = 1.0
	
	tx_note_e note;
	
	ulong nonce;
	
	hash_t salt;
	
	optional<addr_t> sender;			// to receive change from fee
	
	vector<txin_t> inputs;
	
	vector<txout_t> outputs;
	
	vector<txin_t> exec_inputs;
	
	vector<txout_t> exec_outputs;
	
	vector<Operation*> execute;
	
	vector<Solution*> solutions;
	
	Contract* deploy;
	
	Transaction* parent;
	
	bool is_extendable;
	
	static const uint MAX_SOLUTIONS = 255;
	
	
	void finalize();
	
	void add_input(addr_t currency, addr_t address, ulong amount);
	
	void add_output(addr_t currency, addr_t address, ulong amount, optional<addr_t> sender);
	
	void merge_sign(Transaction* tx);
	
	bool is_valid() const;
	
	bool is_signed() const;
	
	hash_t calc_hash(bool full_hash = false) const;
	
	ulong calc_cost(ChainParams* params) const;
	
	Solution* get_solution(uint index) const;
	
	txout_t get_output(uint index) const;
	
	vector<txin_t> get_inputs() const;
	
	vector<txout_t> get_outputs() const;
	
	vector<txin_t> get_all_inputs() const;
	
	vector<txout_t> get_all_outputs() const;
	
	vector<Operation*> get_all_operations() const;
	
	map<addr_t, pair<uint128, uint128>> get_balance() const;
	
}
