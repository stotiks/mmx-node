name: CI

on:
  push:
    tags:
      - '*'
  schedule:
      - cron: "0 4 * * *"

env:
  VCPKG_COMMIT_ID: "14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44"
  CMAKE_BUILD_PRESET: "windows-release"
  MMX_VERSION: ${{ github.ref_name }}
  MMX_WIN_PACK: "TRUE"
  
  MMX_TELEGRAM_TOKEN: ${{ secrets.MMX_TELEGRAM_TOKEN }} 
  MMX_TELEGRAM_TO_1: ${{ secrets.MMX_TELEGRAM_TO_1 }}
  MMX_TELEGRAM_TO_2: ${{ secrets.MMX_TELEGRAM_TO_2 }}
  DISCORD_WEBHOOK: ${{ secrets.MMX_DISCORD_WEBHOOK }}    

jobs:

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Set image name
        run: echo "IMAGE_ID=$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ env.IMAGE_ID }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha
          flavor: |
            latest=true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache 
  
  msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          
      - uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ env.CMAKE_BUILD_PRESET }}
          buildPreset: ${{ env.CMAKE_BUILD_PRESET }}
   
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "build"
          path: ./build/${{ env.CMAKE_BUILD_PRESET }}/!bin/Release/

      - name: Run CPack
        run: cpack -C Release --config build/${{ env.CMAKE_BUILD_PRESET }}/CPackConfig.cmake -B build/${{ env.CMAKE_BUILD_PRESET }}/!package

      - name: Zip files
        run: Get-ChildItem "./build/${{ env.CMAKE_BUILD_PRESET }}/!package" -Filter *.exe | Foreach-Object { 7z a ( (Convert-Path $_.PSParentPath) + "\"  + $_.BaseName + ".zip") $_.FullName }

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "package"
          path: ./build/${{ env.CMAKE_BUILD_PRESET }}/!package/*.exe

      - name: Upload a Build Artifact to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/${{ env.CMAKE_BUILD_PRESET }}/!package/*.zip
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          
  notify:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [msvc, docker]
    steps:

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
        
      - name: Telegram notification
        if: ${{ env.MMX_TELEGRAM_TO_1 != '' }} && ${{ env.MMX_TELEGRAM_TOKEN != '' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.MMX_TELEGRAM_TO_1 }}
          token: ${{ env.MMX_TELEGRAM_TOKEN }}
          format: html
          message: |
            MMX Node release ${{ steps.get_version.outputs.VERSION }}      
            ${{ github.event.repository.url }}/releases/${{ steps.get_version.outputs.VERSION }}
            
            <a href="https://t.me/mmx_node">Telegram channel</a>
            <a href="https://t.me/mmx_node_chat">Telegram chat</a>
            <a href="https://t.me/mmx_node_chat_ru">Telegram chat[RU]</a>
            <a href="https://discord.gg/tCwevssVmY">Discord</a>
            
      - name: Telegram notification
        if: ${{ env.MMX_TELEGRAM_TO_2 != '' }} && ${{ env.MMX_TELEGRAM_TOKEN != '' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.MMX_TELEGRAM_TO_2 }}
          token: ${{ env.MMX_TELEGRAM_TOKEN }}
          format: html
          message: |
            MMX Node release ${{ steps.get_version.outputs.VERSION }}      
            ${{ github.event.repository.url }}/releases/${{ steps.get_version.outputs.VERSION }}
            
            <a href="https://t.me/mmx_node">Telegram channel</a>
            <a href="https://t.me/mmx_node_chat">Telegram chat</a>
            <a href="https://t.me/mmx_node_chat_ru">Telegram chat[RU]</a>
            <a href="https://discord.gg/tCwevssVmY">Discord</a>            
            
      - name: Discord notification
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        uses: Ilshidur/action-discord@master
        with:
          args: |
            MMX Node release ${{ steps.get_version.outputs.VERSION }}      
            ${{ github.event.repository.url }}/releases/${{ steps.get_version.outputs.VERSION }}          
