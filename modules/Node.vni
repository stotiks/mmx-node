package mmx;

import mmx.vm.varptr_t;

module Node implements vnx.addons.HttpComponent {
	
	vnx.TopicPtr input_vdfs = "network.vdfs";
	vnx.TopicPtr input_proof = "network.proof";
	vnx.TopicPtr input_blocks = "network.blocks";
	vnx.TopicPtr input_transactions = "network.transactions";
	vnx.TopicPtr input_timelord_vdfs = "timelord.proofs";
	vnx.TopicPtr input_harvester_proof = "harvester.proof";

	vnx.TopicPtr output_verified_vdfs = "node.verified_vdfs";
	vnx.TopicPtr output_verified_proof = "node.verified_proof";
	vnx.TopicPtr output_verified_blocks = "node.verified_blocks";
	vnx.TopicPtr output_verified_transactions = "node.verified_transactions";
	vnx.TopicPtr output_committed_blocks = "node.committed_blocks";
	vnx.TopicPtr output_transactions = "node.transactions";
	vnx.TopicPtr output_interval_request = "timelord.requests";
	vnx.TopicPtr output_timelord_infuse = "timelord.infuse";
	vnx.TopicPtr output_challenges = "harvester.challenges";
	
	int max_queue_ms = 10000;				// [ms]
	int update_interval_ms = 1000;			// [ms]
	int validate_interval_ms = 500;			// [ms]
	int sync_loss_delay = 60;				// when to re-sync if stuck [sec]
	
	uint max_history = 1000;				// max block header history
	uint max_fork_length = 10000;			// to keep in memory at most (during sync)
	uint tx_pool_limit = 100;				// number of full blocks
	
	uint max_sync_jobs = 64;				// number of parallel requests
	uint max_sync_ahead = 1000;				// how many blocks to fetch ahead at most
	uint num_sync_retries = 3;				// how often to retry when reaching a peak
	uint replay_height = -1;				// to limit reloading from disk and force resync
	
	uint num_vdf_threads = 8;
	uint vdf_check_divider = 5000;			// how many VDFs to verify during sync
	uint vdf_verify_divider = 1;			// TODO: how many VDFs to verify when synced
	
	int opencl_device = 0;					// device to use for VDF verification (-1 to disable)
	
	bool do_sync = true;
	bool show_warnings = false;
	
	string storage_path;
	string database_path = "db/";
	string router_name = "Router";
	string timelord_name = "TimeLord";
	
	
	@Permission(permission_e.PUBLIC)
	ChainParams* get_params() const;
	
	@Permission(permission_e.PUBLIC)
	NetworkInfo* get_network_info() const;
	
	@Permission(permission_e.PUBLIC)
	hash_t get_genesis_hash() const;
	
	@Permission(permission_e.PUBLIC)
	uint get_height() const;
	
	@Permission(permission_e.PUBLIC)
	optional<uint> get_synced_height() const;
	
	@Permission(permission_e.PUBLIC)
	Block* get_block(hash_t hash) const;
	
	@Permission(permission_e.PUBLIC)
	Block* get_block_at(uint height) const;
	
	@Permission(permission_e.PUBLIC)
	BlockHeader* get_header(hash_t hash) const;
	
	@Permission(permission_e.PUBLIC)
	BlockHeader* get_header_at(uint height) const;
	
	@Permission(permission_e.PUBLIC)
	optional<hash_t> get_block_hash(uint height) const;
	
	@Permission(permission_e.PUBLIC)
	optional<uint> get_tx_height(hash_t id) const;
	
	@Permission(permission_e.PUBLIC)
	optional<tx_info_t> get_tx_info(hash_t id) const;
	
	@Permission(permission_e.PUBLIC)
	optional<tx_info_t> get_tx_info_for(Transaction* tx) const;
	
	@Permission(permission_e.PUBLIC)
	vector<hash_t> get_tx_ids_at(uint height) const;
	
	@Permission(permission_e.PUBLIC)
	vector<hash_t> get_tx_ids_since(uint height) const;
	
	@Permission(PUBLISH)
	void add_block(Block* block);
	
	@Permission(PUBLISH)
	void add_transaction(Transaction* tx, bool pre_validate);
	
	// TOOD: void await_transactions(vector<hash_t> tx_ids, uint min_confirm = 1) const;
	
	@Permission(permission_e.PUBLIC)
	Contract* get_contract(addr_t address) const;
	
	@Permission(permission_e.PUBLIC)
	Contract* get_contract_for(addr_t address) const;
	
	@Permission(permission_e.PUBLIC)
	Contract* get_contract_at(addr_t address, hash_t block_hash) const;
	
	@Permission(permission_e.PUBLIC)
	vector<Contract*> get_contracts(vector<addr_t> addresses) const;
	
	@Permission(permission_e.PUBLIC)
	map<addr_t, Contract*> get_contracts_by(vector<addr_t> addresses) const;
	
	@Permission(permission_e.PUBLIC)
	Transaction* get_transaction(hash_t id, bool include_pending) const;
	
	@Permission(permission_e.PUBLIC)
	vector<Transaction*> get_transactions(vector<hash_t> ids) const;
	
	@Permission(permission_e.PUBLIC)
	vector<tx_entry_t> get_history(vector<addr_t> addresses, int since) const;
	
	@Permission(permission_e.PUBLIC)
	uint128 get_balance(addr_t address, addr_t currency) const;
	
	@Permission(permission_e.PUBLIC)
	map<addr_t, uint128> get_balances(addr_t address) const;
	
	@Permission(permission_e.PUBLIC)
	map<addr_t, balance_t> get_contract_balances(addr_t address) const;
	
	@Permission(permission_e.PUBLIC)
	uint128 get_total_balance(vector<addr_t> addresses, addr_t currency) const;
	
	@Permission(permission_e.PUBLIC)
	map<addr_t, uint128> get_total_balances(vector<addr_t> addresses) const;
	
	@Permission(permission_e.PUBLIC)
	map<pair<addr_t, addr_t>, uint128> get_all_balances(vector<addr_t> addresses) const;
	
	@Permission(permission_e.PUBLIC)
	vector<exec_entry_t> get_exec_history(addr_t address, int since) const;
	
	@Permission(permission_e.PUBLIC)
	map<string, varptr_t> read_storage(addr_t contract, uint height = -1) const;
	
	@Permission(permission_e.PUBLIC)
	map<ulong, varptr_t> dump_storage(addr_t contract, uint height = -1) const;
	
	@Permission(permission_e.PUBLIC)
	varptr_t read_storage_var(addr_t contract, ulong address, uint height = -1) const;
	
	@Permission(permission_e.PUBLIC)
	pair<varptr_t, ulong> read_storage_field(addr_t contract, string name, uint height = -1) const;
	
	@Permission(permission_e.PUBLIC)
	vector<varptr_t> read_storage_array(addr_t contract, ulong address, uint height = -1) const;
	
	@Permission(permission_e.PUBLIC)
	map<varptr_t, varptr_t> read_storage_map(addr_t contract, ulong address, uint height = -1) const;
	
	@Permission(permission_e.PUBLIC)
	vnx.Variant call_contract(addr_t address, string method, vector<vnx.Variant> args) const;
	
	@Permission(permission_e.PUBLIC)
	address_info_t get_address_info(addr_t address) const;
	
	@Permission(permission_e.PUBLIC)
	vector<pair<addr_t, Contract*>> get_virtual_plots_for(bls_pubkey_t farmer_key) const;
	
	@Permission(permission_e.PUBLIC)
	ulong get_virtual_plot_balance(addr_t plot_id, optional<hash_t> block_hash) const;
	
	@Permission(permission_e.PUBLIC)
	offer_data_t get_offer(addr_t address) const;
	
	@Permission(permission_e.PUBLIC)
	vector<offer_data_t> get_offers(uint since, bool is_open) const;
	
	@Permission(permission_e.PUBLIC)
	vector<offer_data_t> get_recent_offers(int limit = 100, bool is_open = true) const;
	
	@Permission(permission_e.PUBLIC)
	vector<offer_data_t> get_recent_offers_for(optional<addr_t> bid, optional<addr_t> ask, int limit = 100, bool is_open = true) const;
	
	@Permission(permission_e.PUBLIC)
	vector<offer_data_t> get_trade_history(int limit = 100, uint since) const;
	
	@Permission(permission_e.PUBLIC)
	vector<offer_data_t> get_trade_history_for(optional<addr_t> bid, optional<addr_t> ask, int limit = 100, uint since) const;
	
	@Permission(permission_e.PUBLIC)
	uint128 get_total_supply(addr_t currency) const;
	
	@Permission(permission_e.PUBLIC)
	vector<BlockHeader*> get_farmed_blocks(vector<bls_pubkey_t> farmer_keys, bool full_blocks, uint since) const;
	
	@Permission(permission_e.PUBLIC)
	map<bls_pubkey_t, uint> get_farmed_block_count(uint since) const;
	
	@Permission(permission_e.PUBLIC)
	uint get_farmed_block_count_for(vector<bls_pubkey_t> farmer_keys, uint since) const;
	
	void start_sync(bool force);
	
	
	void handle(Block value);
	void handle(Transaction value);
	void handle(ProofOfTime value);
	void handle(ProofResponse value);
	
}
