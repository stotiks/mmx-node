package mmx;

module Wallet implements vnx.addons.HttpComponent {
	
	vector<string> key_files;
	
	vector<account_t> accounts;				// index starts at max_key_files
	
	string config_path;
	string storage_path;
	string database_path = "wallet/";
	string node_server = "Node";
	
	uint max_key_files = 100;
	uint num_addresses = 100;
	uint default_expire = 100;				// when transactions expire
	
	int cache_timeout_ms = 1000;			// how often to update from node [ms]
	
	bool enable_bls = true;
	
	
	@Permission(permission_e.SPENDING)
	Transaction* send(uint index, ulong amount, addr_t dst_addr, addr_t currency, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* send_many(uint index, map<addr_t, ulong> amounts, addr_t currency, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* send_from(uint index, ulong amount, addr_t dst_addr, addr_t src_addr, addr_t currency, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* mint(uint index, ulong amount, addr_t dst_addr, addr_t currency, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* deploy(uint index, Contract* contract, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* mutate(uint index, addr_t address, vnx.Object method, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* execute(uint index, addr_t address, string method, vector<vnx.Variant> args, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* deposit(	uint index, addr_t address, string method, vector<vnx.Variant> args,
							ulong amount, addr_t currency, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* make_offer(uint index, uint address, ulong bid_amount, addr_t bid_currency,
							ulong ask_amount, addr_t ask_currency, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* accept_offer(uint index, Transaction* offer, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* revoke(uint index, hash_t txid, addr_t address, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* complete(uint index, Transaction* tx, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Transaction* sign_off(uint index, Transaction* tx, bool cover_fee, spend_options_t options) const;
	
	@Permission(permission_e.SPENDING)
	Solution* sign_msg(uint index, addr_t address, hash_t msg) const;
	
	void send_off(uint index, Transaction* tx) const;
	
	void mark_spent(uint index, map<pair<addr_t, addr_t>, uint128> amounts);
	
	void reserve(uint index, map<pair<addr_t, addr_t>, uint128> amounts);
	
	void release(uint index, map<pair<addr_t, addr_t>, uint128> amounts);
	
	void release_all();
	
	void reset_cache(uint index);
	
	void update_cache(uint index) const;
	
	vector<tx_entry_t> get_history(uint index, int since) const;
	
	vector<tx_log_entry_t> get_tx_history(uint index, int limit = -1, uint offset) const;
	
	vector<txin_t> gather_inputs_for(uint index, ulong amount, addr_t currency, spend_options_t options) const;
	
	balance_t get_balance(uint index, addr_t currency, uint min_confirm = 0) const;
	
	map<addr_t, balance_t> get_balances(uint index, uint min_confirm = 0) const;
	
	map<addr_t, Contract*> get_contracts(uint index) const;
	
	addr_t get_address(uint index, uint offset) const;
	
	vector<addr_t> get_all_addresses(int index) const;				// (index == -1) -> all wallets
	
	address_info_t get_address_info(uint index, uint offset) const;
	
	vector<address_info_t> get_all_address_infos(int index) const;
	
	account_t get_account(uint index) const;
	
	map<uint, account_t> get_all_accounts() const;
	
	void add_account(uint index, account_t config);
	
	void create_account(account_t config);
	
	void create_wallet(account_t config, optional<hash_t> seed);
	
	@Permission(permission_e.SPENDING)
	hash_t get_master_seed(uint index) const;
	
	
	FarmerKeys* get_farmer_keys(uint index) const;
	
	vector<FarmerKeys*> get_all_farmer_keys() const;
	
}
