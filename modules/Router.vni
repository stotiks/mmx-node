package mmx;

module Router extends vnx.addons.MsgServer implements vnx.addons.HttpComponent {
	
	vnx.TopicPtr input_vdfs = "timelord.proofs";
	vnx.TopicPtr input_verified_vdfs = "node.verified_vdfs";
	vnx.TopicPtr input_verified_proof = "node.verified_proof";
	vnx.TopicPtr input_verified_blocks = "node.verified_blocks";
	vnx.TopicPtr input_verified_transactions = "node.verified_transactions";
	vnx.TopicPtr input_transactions = "node.transactions";
	
	vnx.TopicPtr output_vdfs = "network.vdfs";
	vnx.TopicPtr output_proof = "network.proof";
	vnx.TopicPtr output_blocks = "network.blocks";
	vnx.TopicPtr output_transactions = "network.transactions";
	
	int max_queue_ms = 1000;				// [ms]
	int send_interval_ms = 20;				// [ms]
	int query_interval_ms = 10000;			// [ms]
	int update_interval_ms = 1000;			// [ms]
	int connect_interval_ms = 10000;		// [ms]
	int fetch_timeout_ms = 10000;			// for fetching data from peers [ms]
	int relay_target_ms = 5000;				// [ms]
	
	uint sync_loss_delay = 60;				// when to re-sync [sec]
	uint discover_interval = 60;			// how often to search for new peers [sec]
	
	uint num_peers_out = 8;					// maximum outgoing connections to synced peers
	uint max_connect_threads = 32;			// maximum parallel connect attempts
	
	uint min_sync_peers = 2;				// minimum peers needed for syncing
	
	uint max_sent_cache = 20000;
	uint max_hash_cache = 100000;
	
	uint vdf_credits = 1024;				// node reward for valid vdf
	uint block_credits = 256;				// node reward for valid block
	uint proof_credits = 10;				// node + farmer reward for valid proof
	
	uint vdf_relay_cost = 768;				// node cost
	uint proof_relay_cost = 2;				// farmer cost + node reward
	uint block_relay_cost = 8;				// farmer cost + node reward
	
	uint max_node_credits = 1024;
	uint max_farmer_credits = 32;
	
	uint node_version = 102;
	node_type_e mode = FULL_NODE;
	
	bool do_relay = true;
	
	set<string> seed_peers;
	set<string> fixed_peers;
	set<string> block_peers;
	
	string storage_path;
	string node_server = "Node";
	
	
	void discover();
	
	hash_t get_id() const;
	
	node_info_t get_info() const;
	
	pair<pubkey_t, signature_t> sign_msg(hash_t msg) const;
	
	vector<string> get_peers(uint max_count = 10) const;
	
	vector<string> get_known_peers() const;
	
	vector<string> get_connected_peers() const;
	
	PeerInfo* get_peer_info() const;
	
	vector<pair<string, uint>> get_farmer_credits() const;
	
	vector<Block*> get_blocks_at(uint height) const async;
	
	Block* fetch_block(hash_t hash, optional<string> address) const async;
	
	Block* fetch_block_at(uint height, string address) const async;
	
	
	void handle(Block sample);
	void handle(Transaction sample);
	void handle(ProofOfTime sample);
	void handle(ProofResponse sample);
	
}
